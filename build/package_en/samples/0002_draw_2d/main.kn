; Draw 2D Sample (C)Kuina-chan

func main()
	var wndMain: wnd@Wnd :: wnd@makeWnd(null, %aspect, 1600, 900, "Draw 2D Sample") {Creating a window.}
	var drawMain: wnd@Draw :: wnd@makeDraw(wndMain, 0, 0, 1600, 900, %scale, %scale, false) {Creating a draw control.}
	var texKuin: draw@Tex :: draw@makeTex("res/kuin.png") {Loading an image.}
	var fontProportional: draw@Font :: draw@makeFont(null, 32, false, false, true, 0.0) {Creating a proportional font.}
	var fontMonospace: draw@Font :: draw@makeFont(null, 32, false, false, false, 40.0) {Creating a monospaced font.}
	do draw@clearColor(0xFF333333) {Setting the background color.}
	while(wnd@act())
		do draw2d@line(100.0, 100.0, 200.0, 200.0, 3.0, 0xFFFF3333) {Line segment.}
		do draw2d@rectLine(250.0, 100.0, 100.0, 100.0, 3.0, 0xFF33FF33) {Rectangle border.}
		do draw2d@rect(400.0, 100.0, 100.0, 100.0, 0xFF3333FF) {Rectangle.}
		do draw2d@circle(600.0, 150.0, 50.0, 50.0, 0xFFFFFF33) {Circle.}
		do draw2d@circleLine(750.0, 150.0, 50.0, 50.0, 3.0, 0xFFFFFF33) {Circle border.}
		do draw2d@tri(900.0, 100.0, 850.0, 200.0, 950.0, 200.0, 0xFFFF33FF) {Triangle.}
		for i(0, 3)
			do texKuin.draw(100.0 + i $ float * 200.0, 300.0, 0.0, 0.0, 150.0, 150.0, draw@white) {Image.}
		end for
		do draw@rect(175.0, 375.0, 100.0, 100.0, 0x7FFF0000) {Translucent.}
		do draw@blend(%add)
		do draw@rect(375.0, 375.0, 100.0, 100.0, 0xFFFF0000) {Additive blending.}
		do draw@blend(%sub)
		do draw@rect(575.0, 375.0, 100.0, 100.0, 0xFFFF0000) {Subtraction blending.}
		do draw@blend(%mul)
		do draw@rect(775.0, 375.0, 100.0, 100.0, 0xFFFF0000) {Multiply blending.}
		do draw@blend(%alpha)
		do texKuin.drawScale(100.0, 500.0, 300.0, 300.0, 0.0, 0.0, 150.0, 150.0, draw@white) {Expansion.}
		do texKuin.drawRot(500.0, 575.0, 150.0, 150.0, 0.0, 0.0, 150.0, 150.0, 75.0, 75.0, -draw@cnt() $ float * lib@pi / 60.0, draw@white) {Rotation.}
		var width: float
		var height: float
		do fontProportional.align(%center, %top)
		do fontMonospace.align(%center, %top)
		do fontProportional.calcSize(&width, &height, "Propor\ntional")
		do fontProportional.draw(1100.0, 300.0, "Propor\ntional", draw@white) {Proportional font.}
		do draw@rect(1100.0, 300.0, width, height, 0x7FFF0000)
		do fontMonospace.calcSize(&width, &height, "Mono\nspace")
		do fontMonospace.draw(1100.0, 400.0, "Mono\nspace", draw@white) {Monospaced font.}
		do draw@rect(1100.0, 400.0, width, height, 0x7FFF0000)
		do draw@render(60)
	end while
end func
