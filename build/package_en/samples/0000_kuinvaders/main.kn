; Kuinvaders (C)Kuina-chan

; The main function is called immediately after execution, and the application ends when the main function is exited.
func main()
	var wndMain: wnd@Wnd :: wnd@makeWnd(null, %aspect, 1600, 900, "Kuinvaders") {Creating a window.}
	var drawMain: wnd@Draw :: wnd@makeDraw(wndMain, 0, 0, 1600, 900, %scale, %scale, false) {Creating a draw control.}
	; wnd@act is a function that handles window operations and must be called periodically or the window will become inoperable. When the window is closed, it will return false, and when it does, the program will exit the infinite loop to terminate.
	while(wnd@act())
		do @title() {Calling up the title screen.}
		do @game() {Calling up the game screen.}
	end while
end func

; Title screen.
func title()
	var texTitle: draw@Tex :: draw@makeTex("res/title.jpg") {Title image.}
	while(wnd@act() & input@pad(0, %a) <> 1) {Loop until A button is pressed.}
		do texTitle.draw(0.0, 0.0, 0.0, 0.0, 1600.0, 900.0, draw@white) {Drawing the title.}
		do draw@render(60) {Screen refresh and adjust to 60FPS. The period until this is called again is called one frame.}
	end while
end func

; Game screen.
func game()
	var texBack: draw@Tex :: draw@makeTex("res/back.jpg") {Background image.}
	var texGame: draw@Tex :: draw@makeTex("res/game.png") {Image used in the game.}
	var stage: int :: 1 {Current stage.}
	class Beam() {Beam class.}
		+var x: float {Coordinate X.}
		+var y: float {Coordinate Y.}
	end class
	; Loop per stage.
	while loopStage(wnd@act())
		var playerX: float :: 800.0 {Player coordinate X.}
		var playerY: float :: 800.0 {Player coordinate Y.}
		var beams: list<Beam> :: #list<Beam> {List of player beams.}
		var enemies: []int :: #[5 * 6]int {Create 5 rows and 6 columns of enemies. The value is life.}
		do enemies.fill(1) {Assign 1 to the life of the enemies.}
		var enemyX: float :: 200.0 / 2.0 {Coordinates X of enemy group.}
		var enemyY: float :: 100.0 {Coordinates Y of enemy group.}
		var enemyVeloX: float :: 1.0 + stage $ float + 30.0 / (5.0 * 6.0) {Velocity X of enemy group.}
		var enemyTargetY: float :: 0.0 {Objective coordinate of enemy group in Y direction (used for downward movement).}
		var enemyLeft: int :: 0 {Left edge of the living enemies. Used to determine if their move should be folded.}
		var enemyRight: int :: 5 {Right edge of the living enemies. Used to determine if their move should be folded.}
		var enemyBottom: int :: 4 {Bottom edge of the living enemies. Used to determine if the line has been crossed.}
		var enemyNum: int :: 5 * 6 {Number of the living enemies.}
		var enemyBeams: list<Beam> :: #list<Beam> {List of enemy beams.}
		var gameover: int :: 0 {Game over flag. 0=In Game, 1=Clear The Stage, 2=Death.}
		; Loop per frame.
		while(wnd@act())
			; Drawing the background.
			do texBack.draw(0.0, 0.0, 0.0, 0.0, 1600.0, 900.0, draw@white)
			; Player movement.
			if(input@pad(0, %left) > 0) {Press and hold left button.}
				do playerX :- 12.0 {Move left.}
			end if
			if(input@pad(0, %right) > 0) {Press and hold right button.}
				do playerX :+ 12.0 {Move right.}
			end if
			if(input@pad(0, %up) > 0) {Press and hold up button.}
				do playerY :- 12.0 {Move up.}
			end if
			if(input@pad(0, %down) > 0) {Press and hold down button.}
				do playerY :+ 12.0 {Move down.}
			end if
			; Clamp the coordinates so that the player does not exceed the range of possible movement.
			do playerX :: lib@clampFloat(playerX, 140.0 / 2.0, 1600.0 - 140.0 / 2.0)
			do playerY :: lib@clampFloat(playerY, 700.0, 900.0)
			; The process of the player firing the beam and the button process when the game is over.
			if(input@pad(0, %a) = 1)
				if(gameover = 1)
					do stage :+ 1
					skip loopStage {The stage is clear, so go to the next stage.}
				elif(gameover = 2)
					break loopStage {Return to title screen due to death.}
				end if
				var beam: Beam :: #Beam
				do beam.x :: playerX
				do beam.y :: playerY - 220.0 / 2.0
				do beams.add(beam) {Add beams to the list.}
			end if
			; Drawing the player. The Kuin@Cnt function returns a value that increases by one per frame.
			if(gameover <> 2)
				do texGame.draw(playerX - 140.0 / 2.0, playerY - 220.0 / 2.0, (draw@cnt() / 10 % 3) $ float * 140.0, 0.0, 140.0, 220.0, draw@white)
			end if
			; Movement of the entire enemy.
			if(gameover = 0)
				if(enemyTargetY <> 0.0)
					do enemyY :+ 8.0 {Move downward at the edge of the screen.}
					if(enemyY >= enemyTargetY)
						do enemyTargetY :: 0.0 {Reset the target coordinates when the target coordinates are reached.}
					end if
					if(enemyY + enemyBottom $ float * 45.0 > 700.0)
						do gameover :: 2 {If an enemy crosses the bottom line, the player dies.}
					end if
				else
					do enemyX :+ enemyVeloX {Moving to the left or right.}
					if(enemyX <= 200.0 / 2.0 - enemyLeft $ float * 100.0) {Reaching the left edge.}
						do enemyX :: 200.0 / 2.0 - enemyLeft $ float * 100.0
						do enemyVeloX :: 2.0 + stage $ float + 30.0 / enemyNum $ float {Turn back to the right at a speed based on the number of enemies remaining.}
						do enemyTargetY :: enemyY + 60.0 {Move downward.}
					end if
					if(enemyX >= 1600.0 - 200.0 / 2.0 - enemyRight $ float * 100.0)
						do enemyX :: 1600.0 - 200.0 / 2.0 - enemyRight $ float * 100.0
						do enemyVeloX :: -(2.0 + stage $ float + 30.0 / enemyNum $ float) {Turn back to the left at a speed based on the number of enemies remaining.}
						do enemyTargetY :: enemyY + 60.0 {Move downward.}
					end if
				end if
			end if
			; Enemy processing and drawing.
			for i(0, 4)
				for j(0, 5)
					if(enemies[i * 6 + j] = 0)
						skip j {Skip the part where the enemy disappears.}
					end if
					if(lib@rnd(0, 60 * enemyNum / lib@min(stage, 30)) = 0) {Fires a beam at a certain rate.}
						var beam: Beam :: #Beam
						do beam.x :: enemyX + j $ float * 100.0
						do beam.y :: enemyY + i $ float * 45.0
						do enemyBeams.add(beam)
					end if
					do texGame.draw(enemyX - 200.0 / 2.0 + j $ float * 100.0, enemyY - 120.0 / 2.0 + i $ float * 45.0, (draw@cnt() / 10 % 3) $ float * 200.0, 220.0, 200.0, 120.0, draw@white)
				end for
			end for
			; Player beams movement and drawing.
			do beams.head() {Scan the beams list in order from the top.}
			while loopBeams(!beams.term())
				var beam: Beam :: beams.get()
				do beam.y :- 20.0 {Move upward.}
				if(beam.y < -90.0 / 2.0)
					do beams.del() {If it goes off screen, delete it.}
					skip loopBeams {When an element is deleted, it points to the next element without calling the .next() function.}
				end if
				; Collision detection with enemies.
				for i(0, 4)
					for j(0, 5)
						if(enemies[i * 6 + j] > 0 & lib@dist(enemyX + j $ float * 100.0, enemyY + i $ float * 45.0, beam.x, beam.y) <= 120.0 / 2.0 + 90.0 / 2.0) {Collision if distance is less than or equal to total radius.}
							do enemies[i * 6 + j] :- 1 {Reduction of enemy life.}
							if(enemies[i * 6 + j] = 0)
								do enemyNum :- 1 {If the enemy has 0 life, the total number of enemies will be reduced.}
							end if
							do beams.del() {It also makes the beam of the player disappear.}
							skip loopBeams
						end if
					end for
				end for
				do texGame.draw(beam.x - 90.0 / 2.0, beam.y - 90.0 / 2.0, 420.0, 0.0, 90.0, 90.0, draw@white)
				do beams.next()
			end while
			if(enemyNum = 0) {If the number of enemies is zero, the stage is cleared.}
				do gameover :: 1
			else {Update various enemy coordinates if the enemy is still alive.}
				while loopEnemyLeft(true)
					for i(0, 4)
						if(enemies[i * 6 + enemyLeft] > 0)
							break loopEnemyLeft {Enemies are present on the left edge.}
						end if
					end for
					do enemyLeft :+ 1 {If the left edge of the enemy has been wiped out, update the left edge coordinates.}
				end while
				while loopEnemyRight(true)
					for i(0, 4)
						if(enemies[i * 6 + enemyRight] > 0)
							break loopEnemyRight {Enemies are present on the right edge.}
						end if
					end for
					do enemyRight :- 1 {If the right edge of the enemy has been wiped out, update the right edge coordinates.}
				end while
				while loopEnemyBottom(true)
					for i(0, 5)
						if(enemies[enemyBottom * 6 + i] > 0)
							break loopEnemyBottom {Enemies are present on the bottom edge.}
						end if
					end for
					do enemyBottom :- 1 {If the bottom edge of the enemy has been wiped out, update the bottom edge coordinates.}
				end while
			end if
			; Movement and drawing of enemy beams.
			do enemyBeams.head()
			while loopEnemyBeams(!enemyBeams.term())
				var beam: Beam :: enemyBeams.get()
				do beam.y :+ 10.0
				if(gameover = 0 & lib@dist(beam.x, beam.y, playerX, playerY) <= 70.0 / 2.0 + 140.0 / 2.0)
					do gameover :: 2 {If the player is hit by an enemy beam, the game is over immediately.}
				end if
				if(beam.y > 900.0 + 100.0 / 2.0)
					do enemyBeams.del() {If it goes off screen, delete it.}
					skip loopEnemyBeams
				end if
				do texGame.draw(beam.x - 70.0 / 2.0, beam.y - 100.0 / 2.0, 420.0, 90.0, 70.0, 100.0, draw@white)
				do enemyBeams.next()
			end while
			do draw@render(60)
		end while
	end while
end func
