; Kuinote (C)Kuina-chan

; Windows and controls.
var wndMain: wnd@Wnd
var editText: wnd@EditMulti

func main()
	; Creating a window.
	do @wndMain :: wnd@makeWnd(null, %normal, 1024, 768, "Kuinote")
	do @wndMain.onClose :: @wndMainOnClose {Register an event when the window is closed.}
	do @wndMain.onPushMenu :: @wndMainOnPushMenu {Register an event when a menu item is selected.}
	do @editText :: wnd@makeEditMulti(@wndMain, 12, 12, 1000, 744, %scale, %scale)
	; Creating a menu.
	var menuMain: wnd@Menu :: wnd@makeMenu()
	var popupMainFile: wnd@Popup :: wnd@makePopup()
	do menuMain.addPopup("&File", popupMainFile)
	do popupMainFile.add(0x0001, "&New")
	do popupMainFile.addLine()
	do popupMainFile.add(0x0002, "E&xit")
	var popupMainHelp: wnd@Popup :: wnd@makePopup()
	do menuMain.addPopup("&Help", popupMainHelp)
	do popupMainHelp.add(0x1001, "&About Kuinote...")
	; Registering the menu.
	do @wndMain.setMenu(menuMain)
	; Wait for the user to perform an operation.
	while(wnd@act())
	end while
end func

; Event function called when the window is closed.
func wndMainOnClose(wnd: wnd@WndBase): bool
	var result: wnd@MsgBoxResult :: wnd@msgBox(@wndMain, "Do you want to close the application?", "Kuinote", %warn, %yesNoCancel)
	if(result = %yes)
		ret true {If true is returned, the window will be closed.}
	else
		ret false {If false is returned, the window will not be closed.}
	end if
end func

; Event function called when a menu item is selected.
func wndMainOnPushMenu(wnd: wnd@WndBase, id: int)
	switch(id)
	case 0x0001 {New}
		do @editText.setText("") {Empty the text.}
	case 0x0002 {Exit}
		do @wndMain.close() {Close the window.}
	case 0x1001 {About Kuinote}
		do wnd@msgBox(@wndMain, "Kuinote\nVersion 1.0.0\n(C)Kuina-chan", "Kuinote", %info, %ok)
	end switch
end func
