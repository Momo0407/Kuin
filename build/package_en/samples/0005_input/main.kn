; Input Sample (C)Kuina-chan

var drawMain: wnd@Draw
var mouseX: int
var mouseY: int
var mouseDownL: bool
var keyBuf: []char

func main()
	var wndMain: wnd@Wnd :: wnd@makeWnd(null, %aspect, 1600, 900, "Input Sample")
	do wndMain.onActivate :: @wndMainOnActivate {Event when a window becomes active.}
	do @drawMain :: wnd@makeDraw(wndMain, 0, 0, 1600, 900, %scale, %scale, false)
	do @drawMain.onMouseMove :: @drawMainOnMouseMove {Event when the mouse is moved.}
	do @drawMain.onMouseDownL :: @drawMainOnMouseDownL {Event when the mouse button is pressed.}
	do @drawMain.onMouseUpL :: @drawMainOnMouseUpL {Event when the mouse button is released.}
	do @drawMain.onMouseEnter :: @drawMainOnMouseEnter {Event when the mouse enters the window.}
	do @drawMain.onMouseLeave :: @drawMainOnMouseLeave {Event when the mouse leaves the window.}
	do @drawMain.onKeyChar :: @drawMainOnKeyChar {Event when a character is entered.}
	var font: draw@Font :: draw@makeFont(null, 28, false, false, false, 22.0)
	do @keyBuf :: "                    "
	do @drawMain.focus() {Make them focus to receive keys.}
	while(wnd@act())
		do font.draw(100.0, 50.0, "'A' button ('Z' key): " ~ input@pad(0, %a).toStr(), draw@white)
		do font.draw(100.0, 100.0, "'B' button ('X' key): " ~ input@pad(0, %b).toStr(), draw@white)
		do font.draw(100.0, 150.0, "'C' button ('C' key): " ~ input@pad(0, %c).toStr(), draw@white)
		do font.draw(100.0, 200.0, "'D' button ('V' key): " ~ input@pad(0, %d).toStr(), draw@white)
		do font.draw(100.0, 250.0, "'E' button: " ~ input@pad(0, %e).toStr(), draw@white)
		do font.draw(100.0, 300.0, "'F' button: " ~ input@pad(0, %f).toStr(), draw@white)
		do font.draw(100.0, 350.0, "'G' button: " ~ input@pad(0, %g).toStr(), draw@white)
		do font.draw(100.0, 400.0, "'H' button: " ~ input@pad(0, %h).toStr(), draw@white)
		do font.draw(100.0, 450.0, "'I' button: " ~ input@pad(0, %i).toStr(), draw@white)
		do font.draw(100.0, 500.0, "'L' button ('A' key): " ~ input@pad(0, %l).toStr(), draw@white)
		do font.draw(100.0, 550.0, "'R' button ('S' key): " ~ input@pad(0, %r).toStr(), draw@white)
		do font.draw(100.0, 600.0, "'Menu' button  ('Esc' key):   " ~ input@pad(0, %menu).toStr(), draw@white)
		do font.draw(100.0, 650.0, "'Left' button  ('Left' key):  " ~ input@pad(0, %left).toStr(), draw@white)
		do font.draw(100.0, 700.0, "'Right' button ('Right' key): " ~ input@pad(0, %right).toStr(), draw@white)
		do font.draw(100.0, 750.0, "'Up' button    ('Up' key):    " ~ input@pad(0, %up).toStr(), draw@white)
		do font.draw(100.0, 800.0, "'Down' button  ('Down' key):  " ~ input@pad(0, %down).toStr(), draw@white)
		do draw@circle(@mouseX $ float, @mouseY $ float, 20.0, 20.0, @mouseDownL ?(0xFF0000FF, 0xFFFFFF00))
		do font.draw(800.0, 50.0, "Key: " ~ @keyBuf, draw@white)
		do draw@render(60)
	end while
end func

func wndMainOnActivate(wnd: wnd@WndBase, active: bool, minimized: bool)
	if(active & !minimized)
		do @drawMain.focus() {Make them focus to receive keys.}
	end if
end func

func drawMainOnMouseMove(wnd: wnd@WndBase, x: int, y: int)
	; Track the mouse when it moves.
	var width: int
	var height: int
	do wnd.getPos(&, &, &width, &height)
	do @mouseX :: x * 1600 / width
	do @mouseY :: y * 900 / height
end func

func drawMainOnMouseDownL(wnd: wnd@WndBase, x: int, y: int)
	do @mouseDownL :: true {Left button pressed.}
end func

func drawMainOnMouseUpL(wnd: wnd@WndBase, x: int, y: int)
	do @mouseDownL :: false {Left button released.}
end func

func drawMainOnMouseEnter(wnd: wnd@WndBase, x: int, y: int)
	do @mouseDownL :: wnd@key(%mouseL) {Processing when exiting and re-entering the window with the left button pressed.}
	do draw@clearColor(0xFFFF9999) {Make the background color pink when the mouse enters the window.}
end func

func drawMainOnMouseLeave(wnd: wnd@WndBase)
	do draw@clearColor(0xFF000000) {Make the background color black when the mouse leaves the window.}
end func

func drawMainOnKeyChar(wnd: wnd@WndBase, key: char)
	do @keyBuf :: (@keyBuf ~ key.toStr()).sub(1, 20)
end func
