func main()
	for(1, 3)
		block
			var n: int :: 0
			for i(0, 100)
				if(math@prime(i))
					do n :+ 1
				end if
			end for
			do cui@print(n.toStr())
		end block

		block
			do cui@print(math@modPow(4, 13, 497).toStr())
			do cui@print(math@modMul(4, 7, 5).toStr())
			do cui@print(math@gcd(40, -15).toStr())
			do cui@print(math@lcm(40, -15).toStr())
			do cui@print("\{(5).sign()}, \{(-5).sign()}, \{(0).sign()}")
			do cui@print("\{(1.2).sign()}, \{(-1.2).sign()}, \{(0.0).sign()}")
		end block

		block
			var n: []int :: math@primeFactors(8051)
			for i(0, ^n - 1)
				do cui@print(n[i].toStr())
			end for
		end block

		block
			do cui@print(lib@toRad(180.0).toStr())
			do cui@print(lib@toDegree(lib@pi / 4.0).toStr())
			do cui@print(math@gamma(5.0).toStr())
			do cui@print(math@fact(5.0).toStr())
			do cui@print(math@factInt(5).toStr())
		end block

		block
			var bm: lib@BmSearch :: lib@makeBmSearch("ababcd")
			do cui@print(bm.find("cdababababababab", -1).toStr())
			var p: int :: -1
			while(p <> -1, skip)
				do p :: bm.find("ababababcdababcd", p)
				do cui@print(p.toStr())
				if (p <> -1)
					do p :+ 1
				end if
			end while
		end block

		block
			var regex: regex@Regex :: regex@makeRegex("c([0-9]+)")
			var pos: int
			var s: [][]char
			do s :: regex.find(&pos, "ab1234c1234d")
			do cui@print(pos.toStr())
			for i(0, ^s - 1)
				do cui@print(s[i])
			end for
			var regex2: regex@Regex :: regex@makeRegex("(.+)([0-9]+)c([0-9]+?)(.+)")
			do s :: regex2.match(&pos, "ab1234c1234d")
			do cui@print(pos.toStr())
			for i(0, ^s - 1)
				do cui@print(s[i])
			end for
		end block

		block
			var regex: regex@Regex :: regex@makeRegex("([A-Z])([A-Z])")
			var pos: []int
			var s: [][][]char
			do s :: regex.findAll(&pos, "abCDefGH")
			do cui@print("^pos = \{^pos}")
			do cui@print("^s = \{^s}")
			for i(0, ^s - 1)
				do cui@print(pos[i].toStr())
				for j(0, ^s[i] - 1)
					do cui@print(s[i][j])
				end for
			end for
		end block

		block
			var regex: regex@Regex :: regex@makeRegex("c([0-9]+)")
			do cui@print(regex.replace("abc1234c1234d", "<$1>", false))
			do cui@print(regex.replace("abc1234c1234d", "<$1>", true))
		end block

		block
			var p: int :: -1
			while(p <> -1, skip)
				do p :: "abcdabcabc".findStr("abc", p)
				do cui@print(p.toStr())
				if(p <> -1)
					do p :+ 1
				end if
			end while
		end block

		block
			var p: int :: -1
			while(p <> -1, skip)
				do p :: "abcdabcabc".findStrLast("abc", p)
				do cui@print(p.toStr())
				if(p <> -1)
					do p :- 1
				end if
			end while
		end block
	end for
end func
