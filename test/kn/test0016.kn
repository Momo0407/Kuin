func main()
	for(1, 3)
		block
			var n: float :: 2.0
			do cui@print((-2 ^ 4).toStr())
			do cui@print((-n ^ 4.0).toStr())
			do cui@print(n $ int.toStr())
		end block

		block
			var n: int :: 5
			do cui@print("\{"\{n+2}" ~ "a"}")
		end block

		block
			class C()
				+var a: int
				+var b: int
			end class

			var l: list<C> :: #list<C>
			do l.add(#C)
			var c: C :: #C
			do c.a :: 3
			do c.b :: 5
			do l.add(c)
			do l.head()
			do l.next()
			var l2: list<C> :: ##l
			do cui@print(l2.get().b.toStr())
			var l3: list<C> :: l $> []bit8 $< list<C>
			do cui@print(l3.get().b.toStr())
		end block

		block
			class C1()
			end class
			class C2(C1)
			end class
			var c1: C1 :: (#C2) $ C1
			do cui@print((c1 =$ C1).toStr())
			do cui@print((c1 =$ C2).toStr())
		end block

		block
			var a: []char :: #[5]char
			var x: char :: 'x'
			do a.fill(x)
			do cui@print(a)
			do a.fill('y')
			do cui@print(a)
		end block

		block
			var a: [][]char :: #[5][]char
			var x: []char :: "x"
			do a.fill(x)
			do cui@print(a[0])
			do a.fill("y")
			do cui@print(a[0])
		end block

		block
			do cui@print(file@fileName("abc/def.txt"))
			do cui@print(file@fileName("abc/"))
			do cui@print(file@fileName("abcdef.txt"))
			do cui@print(file@fileName("ab/cd/ef.txt"))
			do cui@print(file@fileName("ab/cd/"))
			do cui@print(file@delExt("abc/def.txt"))
			do cui@print(file@delExt("abc/"))
			do cui@print(file@delExt("abcdef.txt"))
			do cui@print(file@delExt("ab/cd/ef.txt"))
			do cui@print(file@delExt("ab/cd/"))
			do cui@print(file@delExt("a.txt"))
			do cui@print(file@delExt("a."))
		end block
	end for
end func
