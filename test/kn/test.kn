func [compiler.dll, BuildMem] build(path: []char, funcGetSrc: func<([]char): list<@Line>>, sysDir: []char, output: []char, icon: []char, rls_: bool, env: []char, funcLog: func<([][]char, int, int)>)
end func

func [compiler.dll, InitMemAllocator] initMemAllocator()
end func

func [compiler.dll, FinMemAllocator] finMemAllocator()
end func

func [compiler.dll, ResetMemAllocator] resetMemAllocator()
end func

var wndMain: wnd@Wnd
var tabSrc: wnd@Tab
var editSrc: wnd@EditMulti
var editLog: wnd@EditMulti
var btnCompile: wnd@Btn
var listFile: wnd@List

class Line()
	+var src: []char
	+var lineAddr: int
	+var commentLevel: int
	+var lineContinue: bool
end class

var srcs: dict<[]char, list<@Line>>
var mainSrc: []char
var curSrc: list<@Line>
var bufSrc: list<@Line>

func main()
	do @initMemAllocator()

	do @makeWnd()

	while(wnd@act())
	end while

	do @finMemAllocator()
end func

func makeWnd()
	do @wndMain :: wnd@makeWnd(null, %normal, 1024, 768, "a1")
	do @tabSrc :: wnd@makeTab(@wndMain, 0, 0, 1024 - 200, 768 - 100, %scale, %scale)
	do @editSrc :: wnd@makeEditMulti(@tabSrc, 0, 50, 1024 - 200, 768 - 150, %scale, %scale)
	do @editLog :: wnd@makeEditMulti(@wndMain, 0, 768 - 100, 1024, 100, %scale, %move)
	do @btnCompile :: wnd@makeBtn(@wndMain, 1024 - 200, 0, 200, 50, %move, %fix, "Compile")
	do @btnCompile.onPush :: @btnCompileOnPush
	do @listFile :: wnd@makeList(@wndMain, 1024 - 200, 384, 200, 384 - 100, %move, %scale)

	do @srcs :: #dict<[]char, list<@Line>>
	do @curSrc :: #list<@Line>
	do @srcs.add("_default_.kn", @curSrc)

	do @mainSrc :: "_default_.kn"
	var line: @Line :: #@Line
	do line.src :: ""
	do line.lineAddr :: 1
	do line.commentLevel :: 0
	do line.lineContinue :: false
	do @curSrc.add(line)
end func

func btnCompileOnPush()
	do @resetMemAllocator()
	do @editLog.setText("")
	do @build(@mainSrc, @getSrc, null, null, null, false, "cui", @log)
end func

func getSrc(path: []char): list<@Line>
	var result: list<@Line> :: @srcs.get(path)
	do @bufSrc :: result
	if(result <>& null)
		ret result
	end if
	ret @loadSrc(path)
end func

func loadSrc(path: []char): list<@Line>
	var filePtr: file@Reader :: file@makeReader(path)
	if(filePtr =& null)
		ret null
	end if
	do filePtr.delimiter("")
	var result: list<@Line> :: #list<@Line>
	while(!filePtr.term())
		var line: @Line :: #@Line
		do line.src :: filePtr.readLine()
		do line.lineAddr :: 1
		do line.commentLevel :: 0
		do line.lineContinue :: false
		do result.add(line)
	end while
	do filePtr.fin()
	do @srcs.add(##path, result)
	do @bufSrc :: result
	ret result
end func

func toStr(s: []char): []char
	ret s =& null ?("(null)", s)
end func

func log(args: [][]char, row: int, col: int)
	do @editLog.setText(@editLog.getText() ~ @toStr(args[0]) ~ ", " ~ @toStr(args[1]) ~ ", " ~ @toStr(args[2]) ~ ", " ~ row.toStr() ~ ", " ~ col.toStr() ~ "\n")
end func
