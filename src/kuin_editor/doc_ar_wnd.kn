+class DocArWnd(\doc_ar@DocAr)
	*func ctor()
		do super(me)
		do me.root :: #@ObjWnd
		var width: int
		var height: int
		do me.root.getDefaultSize(&width, &height)
		do me.root.init("wndMain", true, 0, 0, width, height)
	end func

	+*func fix()
		var lines: list<[]char> :: #list<[]char>
		do lines.add("+var \{me.root.name}: \{(me.root $ @ObjArWnd).type()}")

		do me.nodes.head()
		while(!me.nodes.term())
			var node: @ObjArWnd :: me.nodes.get() $ @ObjArWnd
			do lines.add("+var \{node.name}: \{node.type()}")
			do me.nodes.next()
		end while

		do lines.add("")
		do lines.add("+func show()")
		do lines.add("\tif(@\{me.root.name} <>& null)")
		do lines.add("\t\tret")
		do lines.add("\tend if")
		do (me.root $ @ObjArWnd).makeSrc(1, lines, "null")
		if(!me.root.visible)
			do lines.add("\tdo @\{me.root.name}.setVisible(false)")
		end if

		var parentStack: stack<\doc_ar@Obj> :: #stack<\doc_ar@Obj>
		do me.nodes.head()
		while(!me.nodes.term())
			var obj: @ObjArWnd :: me.nodes.get() $ @ObjArWnd
			var parent: \doc_ar@Obj :: \doc_ar@getParent(parentStack, obj)
			if(parent =& null)
				do obj.makeSrc(1, lines, "@" ~ me.root.name)
			else
				var x: int :: obj.x
				var y: int :: obj.y
				do obj.x :- parent.x
				do obj.y :- parent.y
				do obj.makeSrc(1, lines, "@" ~ parent.name)
				do obj.x :: x
				do obj.y :: y
			end if
			if(obj.becomeParent())
				do parentStack.add(obj)
			end if
			if(!obj.visible)
				do lines.add("\tdo @\{obj.name}.setVisible(false)")
			end if
			do me.nodes.next()
		end while

		do lines.add("end func")
		do lines.add("")
		do lines.add("+func close()")
		do lines.add("\tif(@\{me.root.name} =& null)")
		do lines.add("\t\tret")
		do lines.add("\tend if")
		do lines.add("\tdo @\{me.root.name}.close()")
		do lines.add("\tdo @\{me.root.name} :: null")

		do me.nodes.head()
		while(!me.nodes.term())
			do lines.add("\tdo @\{me.nodes.get().name} :: null")
			do me.nodes.next()
		end while

		do lines.add("end func")
		do me.src :: lines.toArray()
	end func

	*func makeObj(name: []char): \doc_ar@Obj
		switch(name)
		case "Wnd"
			ret #@ObjWnd
		case "Btn"
			ret #@ObjBtn
		case "Edit"
			ret #@ObjEdit
		case "Label"
			ret #@ObjLabel
		case "Chk"
			ret #@ObjChk
		case "Group"
			ret #@ObjGroup
		end switch
		ret null
	end func

	*func updateLt()
		do \form@listLt.add("Btn", 1)
		do \form@listLt.add("Chk", 2)
		do \form@listLt.add("Edit", 3)
		do \form@listLt.add("Label", 4)
		do \form@listLt.add("Group", 5)
	end func
end class

class ObjArWnd(\doc_ar@Obj)
	+func type(): []char
	end func

	+func makeSrc(indent: int, lines: list<[]char>, parent: []char)
	end func
end class

class ObjWnd(@ObjArWnd)
	+*func draw(x: float, y: float, width: float, height: float)
		do draw@rect(x, y, width, height, 0xFFF0F0F0)
		do draw@rect(x, y - 30.0, width, 30.0, 0xFFFFFFFF)
		do draw@rectLine(x - 1.0, y - 31.0, width + 2.0, height + 32.0, 0xFF1883D7)
		do \common@fontP.draw(x + 30.0, y - 30.0 + 6.0, me.props.get("text", &), draw@black)
	end func

	+*func getMinMax(minWidth: &int, minHeight: &int, maxWidth: &int, maxHeight: &int)
		do minWidth :: 50
		do minHeight :: 50
		do maxWidth :: lib@intMax
		do maxHeight :: lib@intMax
	end func

	+*func getDefaultSize(width: &int, height: &int)
		do width :: 640
		do height :: 480
	end func

	+*func kind(): []char
		ret "Wnd"
	end func

	+*func init(name: []char, visible: bool, x: int, y: int, width: int, height: int)
		do super(me, name, visible, x, y, width, height)
		do me.props.add("style", "%normal")
		do me.props.add("text", me.name)
		do me.reloadRes()
	end func

	+*func propsNames(): [][]char
		ret ["style", "text"]
	end func

	+*func propsTypes(): []\doc_ar@PropType
		ret [%enum_ $ \doc_ar@PropType, %str]
	end func

	+*func propsTypeDatas(): [][][]char
		ret [["%normal", "%fix", "%aspect", "%popup"], null]
	end func

	+*func type(): []char
		ret "wnd@Wnd"
	end func

	+*func makeSrc(indent: int, lines: list<[]char>, parent: []char)
		do lines.add("\t".repeat(indent) ~ "do @\{me.name} :: wnd@makeWnd(\{parent}, \{me.props.get("style", &)}, \{me.width}, \{me.height}, \"\{me.props.get("text", &)}\")")
	end func
end class

class ObjBtn(@ObjArWnd)
	+*func draw(x: float, y: float, width: float, height: float)
		do draw@rect(x, y, width, height, 0xFFE1E1E1)
		do draw@rectLine(x, y, width, height, 0xFFADADAD)
		var text: []char :: me.props.get("text", &)
		do \common@fontP.draw(lib@floor(x + (width - \common@fontP.calcWidth(text)) / 2.0), lib@floor(y + (height - \common@fontP.maxHeight()) / 2.0), text, draw@black)
	end func

	+*func getMinMax(minWidth: &int, minHeight: &int, maxWidth: &int, maxHeight: &int)
		do minWidth :: 10
		do minHeight :: 23
		do maxWidth :: lib@intMax
		do maxHeight :: lib@intMax
	end func

	+*func getDefaultSize(width: &int, height: &int)
		do width :: 75
		do height :: 23
	end func

	+*func kind(): []char
		ret "Btn"
	end func

	+*func icon(): int
		ret 0
	end func

	+*func init(name: []char, visible: bool, x: int, y: int, width: int, height: int)
		do super(me, name, visible, x, y, width, height)
		do me.props.add("anchorX", "%fix")
		do me.props.add("anchorY", "%fix")
		do me.props.add("text", me.name)
		do me.reloadRes()
	end func

	+*func propsNames(): [][]char
		ret ["anchorX", "anchorY", "text"]
	end func

	+*func propsTypes(): []\doc_ar@PropType
		ret [%enum_ $ \doc_ar@PropType, %enum_, %str]
	end func

	+*func propsTypeDatas(): [][][]char
		ret [["%fix", "%move", "%scale"], ["%fix", "%move", "%scale"], null]
	end func

	+*func type(): []char
		ret "wnd@Btn"
	end func

	+*func makeSrc(indent: int, lines: list<[]char>, parent: []char)
		do lines.add("\t".repeat(indent) ~ "do @\{me.name} :: wnd@makeBtn(\{parent}, \{me.x}, \{me.y}, \{me.width}, \{me.height}, \{me.props.get("anchorX", &)}, \{me.props.get("anchorY", &)}, \"\{me.props.get("text", &)}\")")
	end func
end class

class ObjEdit(@ObjArWnd)
	+*func draw(x: float, y: float, width: float, height: float)
		do draw@rect(x, y, width, height, 0xFFFFFFFF)
		do draw@rectLine(x, y, width, height, 0xFF7A7A7A)
		var text: []char :: me.props.get("text", &)
		do \common@fontP.draw(x + 5.0, y + 3.0, text, draw@black)
	end func

	+*func getMinMax(minWidth: &int, minHeight: &int, maxWidth: &int, maxHeight: &int)
		do minWidth :: 10
		do minHeight :: 19
		do maxWidth :: lib@intMax
		do maxHeight :: 19
	end func

	+*func getDefaultSize(width: &int, height: &int)
		do width :: 100
		do height :: 19
	end func

	+*func kind(): []char
		ret "Edit"
	end func

	+*func icon(): int
		ret 2
	end func

	+*func init(name: []char, visible: bool, x: int, y: int, width: int, height: int)
		do super(me, name, visible, x, y, width, height)
		do me.props.add("anchorX", "%fix")
		do me.props.add("anchorY", "%fix")
		do me.props.add("readonly", "false")
		do me.props.add("text", "")
		do me.reloadRes()
	end func

	+*func propsNames(): [][]char
		ret ["anchorX", "anchorY", "readonly", "text"]
	end func

	+*func propsTypes(): []\doc_ar@PropType
		ret [%enum_ $ \doc_ar@PropType, %enum_, %bool_, %str]
	end func

	+*func propsTypeDatas(): [][][]char
		ret [["%fix", "%move", "%scale"], ["%fix", "%move", "%scale"], null, null]
	end func

	+*func type(): []char
		ret "wnd@Edit"
	end func

	+*func makeSrc(indent: int, lines: list<[]char>, parent: []char)
		do lines.add("\t".repeat(indent) ~ "do @\{me.name} :: wnd@makeEdit(\{parent}, \{me.x}, \{me.y}, \{me.width}, \{me.height}, \{me.props.get("anchorX", &)}, \{me.props.get("anchorY", &)})")
		var readonly: []char :: me.props.get("readonly", &)
		if(readonly <> "false")
			do lines.add("\t".repeat(indent) ~ "do @\{me.name}.readonly(\{readonly})")
		end if
		var text: []char :: me.props.get("text", &)
		if(^text > 0)
			do lines.add("\t".repeat(indent) ~ "do @\{me.name}.setText(\"\{text}\")")
		end if
	end func
end class

class ObjLabel(@ObjArWnd)
	+*func draw(x: float, y: float, width: float, height: float)
		do draw@rect(x, y, width, height, 0xFFEEEEEE)
		var text: []char :: me.props.get("text", &)
		do \common@fontP.draw(x, y, text, draw@black)
	end func

	+*func getMinMax(minWidth: &int, minHeight: &int, maxWidth: &int, maxHeight: &int)
		do minWidth :: 10
		do minHeight :: 12
		do maxWidth :: lib@intMax
		do maxHeight :: 12
	end func

	+*func getDefaultSize(width: &int, height: &int)
		do width :: 35
		do height :: 12
	end func

	+*func kind(): []char
		ret "Label"
	end func

	+*func icon(): int
		ret 3
	end func

	+*func init(name: []char, visible: bool, x: int, y: int, width: int, height: int)
		do super(me, name, visible, x, y, width, height)
		do me.props.add("anchorX", "%fix")
		do me.props.add("anchorY", "%fix")
		do me.props.add("text", me.name)
		do me.reloadRes()
	end func

	+*func propsNames(): [][]char
		ret ["anchorX", "anchorY", "text"]
	end func

	+*func propsTypes(): []\doc_ar@PropType
		ret [%enum_ $ \doc_ar@PropType, %enum_, %str]
	end func

	+*func propsTypeDatas(): [][][]char
		ret [["%fix", "%move", "%scale"], ["%fix", "%move", "%scale"], null]
	end func

	+*func type(): []char
		ret "wnd@Label"
	end func

	+*func makeSrc(indent: int, lines: list<[]char>, parent: []char)
		do lines.add("\t".repeat(indent) ~ "do @\{me.name} :: wnd@makeLabel(\{parent}, \{me.x}, \{me.y}, \{me.width}, \{me.height}, \{me.props.get("anchorX", &)}, \{me.props.get("anchorY", &)}, \"\{me.props.get("text", &)}\")")
	end func
end class

class ObjChk(@ObjArWnd)
	+*func draw(x: float, y: float, width: float, height: float)
		do draw@rect(x, lib@floor(y + (height - 13.0) / 2.0), 13.0, 13.0, 0xFFFFFFFF)
		do draw@rectLine(x, lib@floor(y + (height - 13.0) / 2.0), 13.0, 13.0, 0xFF333333)
		var text: []char :: me.props.get("text", &)
		do \common@fontP.draw(x + 18.0, lib@floor(y + (height - \common@fontP.maxHeight()) / 2.0), text, draw@black)
	end func

	+*func getMinMax(minWidth: &int, minHeight: &int, maxWidth: &int, maxHeight: &int)
		do minWidth :: 16
		do minHeight :: 16
		do maxWidth :: lib@intMax
		do maxHeight :: 16
	end func

	+*func getDefaultSize(width: &int, height: &int)
		do width :: 80
		do height :: 16
	end func

	+*func kind(): []char
		ret "Chk"
	end func

	+*func icon(): int
		ret 1
	end func

	+*func init(name: []char, visible: bool, x: int, y: int, width: int, height: int)
		do super(me, name, visible, x, y, width, height)
		do me.props.add("anchorX", "%fix")
		do me.props.add("anchorY", "%fix")
		do me.props.add("chk", "false")
		do me.props.add("text", me.name)
		do me.reloadRes()
	end func

	+*func propsNames(): [][]char
		ret ["anchorX", "anchorY", "chk", "text"]
	end func

	+*func propsTypes(): []\doc_ar@PropType
		ret [%enum_ $ \doc_ar@PropType, %enum_, %bool_, %str]
	end func

	+*func propsTypeDatas(): [][][]char
		ret [["%fix", "%move", "%scale"], ["%fix", "%move", "%scale"], null, null]
	end func

	+*func type(): []char
		ret "wnd@Chk"
	end func

	+*func makeSrc(indent: int, lines: list<[]char>, parent: []char)
		do lines.add("\t".repeat(indent) ~ "do @\{me.name} :: wnd@makeChk(\{parent}, \{me.x}, \{me.y}, \{me.width}, \{me.height}, \{me.props.get("anchorX", &)}, \{me.props.get("anchorY", &)}, \"\{me.props.get("text", &)}\")")
		var chk: []char :: me.props.get("chk", &)
		if(chk <> "false")
			do lines.add("\t".repeat(indent) ~ "do @\{me.name}.setChk(\{chk})")
		end if
	end func
end class

class ObjGroup(@ObjArWnd)
	+*func draw(x: float, y: float, width: float, height: float)
		var text: []char :: me.props.get("text", &)
		do draw@line(x + 7.0, y + 6.0, x, y + 6.0, 0xFFDCDCDC)
		do draw@line(x, y + 6.0, x, y + height, 0xFFDCDCDC)
		do draw@line(x, y + height, x + width, y + height, 0xFFDCDCDC)
		do draw@line(x + width, y + height, x + width, y + 6.0, 0xFFDCDCDC)
		do draw@line(x + width, y + 6.0, x + 7.0 + \common@fontP.calcWidth(text), y + 6.0, 0xFFDCDCDC)
		do \common@fontP.draw(x + 7.0, y, text, draw@black)
	end func

	+*func getMinMax(minWidth: &int, minHeight: &int, maxWidth: &int, maxHeight: &int)
		do minWidth :: 10
		do minHeight :: 10
		do maxWidth :: lib@intMax
		do maxHeight :: lib@intMax
	end func

	+*func getDefaultSize(width: &int, height: &int)
		do width :: 200
		do height :: 100
	end func

	+*func kind(): []char
		ret "Group"
	end func

	+*func icon(): int
		ret 4
	end func

	+*func init(name: []char, visible: bool, x: int, y: int, width: int, height: int)
		do super(me, name, visible, x, y, width, height)
		do me.props.add("anchorX", "%fix")
		do me.props.add("anchorY", "%fix")
		do me.props.add("text", me.name)
		do me.reloadRes()
	end func

	+*func becomeParent(): bool
		ret true
	end func

	+*func propsNames(): [][]char
		ret ["anchorX", "anchorY", "text"]
	end func

	+*func propsTypes(): []\doc_ar@PropType
		ret [%enum_ $ \doc_ar@PropType, %enum_, %str]
	end func

	+*func propsTypeDatas(): [][][]char
		ret [["%fix", "%move", "%scale"], ["%fix", "%move", "%scale"], null]
	end func

	+*func type(): []char
		ret "wnd@Group"
	end func

	+*func makeSrc(indent: int, lines: list<[]char>, parent: []char)
		do lines.add("\t".repeat(indent) ~ "do @\{me.name} :: wnd@makeGroup(\{parent}, \{me.x}, \{me.y}, \{me.width}, \{me.height}, \{me.props.get("anchorX", &)}, \{me.props.get("anchorY", &)}, \"\{me.props.get("text", &)}\")")
	end func
end class
