+class DocArWnd(\doc_ar@DocArBase)
	**func ctor()
		do me.obj2dRoot :: #@Obj2dWnd
	end func

	+*func makeObj2d(name: []char): \doc_ar@Obj2d
		switch(name)
		case "button"
			ret #@Obj2dBtn
		end switch
		assert(false)
		ret null
	end func

	**func addCtrlList(ctrlList: wnd@List)
		do ctrlList.add("button")
	end func
end class

class Obj2dWnd(\doc_ar@Obj2dRoot)
	**func ctor()
		do me.text :: "Untitled"
	end func

	+*func getMinMaxSize(minWidth: &int, minHeight: &int, maxWidth: &int, maxHeight: &int)
		do minWidth :: 50
		do minHeight :: 50
		do maxWidth :: lib@intMax
		do maxHeight :: lib@intMax
	end func

	+**func load(node: xml@Node)
		do me.setProps(node, ["text"])
	end func

	+**func save(node: xml@Node)
		do node.setAttr("text", me.text)
	end func

	+*func draw(pageX: int, pageY: int)
		var x: float :: (me.absX - pageX) $ float
		var y: float :: (me.absY - pageY) $ float
		var width: float :: me.width $ float
		var height: float :: me.height $ float
		do draw@rect(x, y, width, height, 16#FFF0F0F0)
		do draw@rect(x, y - 30.0, width, 30.0, 16#FFFFFFFF)
		do \common@fontP.draw(x + 30.0, y - 30.0 + 6.0, me.text, draw@black)
		do draw@rectLine(x - 1.0, y - 31.0, width + 2.0, height + 32.0, 16#FF1883D7)
	end func

	+**func updateProp(listView: wnd@ListView, x: int, y: int)
		var idx: int :: listView.len()
		do listView.add("text")
		do listView.setText(idx + 0, 1, me.text)
	end func

	+**func setProp(prop: []char, value: []char)
		switch(prop)
		case "text"
			do me.text :: value
		end switch
	end func

	+var text: []char
end class

class Obj2dWndBase(\doc_ar@Obj2d)
	**func ctor()
		do me.enabled :: true
		do me.visible :: true
	end func

	+**func load(node: xml@Node)
		do me.setProps(node, ["enabled", "visible"])
	end func

	+**func save(node: xml@Node)
		do node.setAttr("enabled", me.enabled.toStr())
		do node.setAttr("visible", me.visible.toStr())
	end func

	+**func updateProp(listView: wnd@ListView, x: int, y: int)
		var idx: int :: listView.len()
		do listView.add("enabled")
		do listView.setText(idx + 0, 1, me.enabled.toStr())
		do listView.add("visible")
		do listView.setText(idx + 1, 1, me.visible.toStr())
	end func

	+**func setProp(prop: []char, value: []char)
		switch(prop)
		case "enabled"
			do me.enabled :: value = "true"
		case "visible"
			do me.visible :: value = "true"
		end switch
	end func

	+var enabled: bool
	+var visible: bool
end class

class Obj2dBtn(@Obj2dWndBase)
	**func ctor()
		do me.text :: ""
	end func

	+*func getName(): []char
		ret "button"
	end func

	+*func getMinMaxSize(minWidth: &int, minHeight: &int, maxWidth: &int, maxHeight: &int)
		do minWidth :: 10
		do minHeight :: 23
		do maxWidth :: lib@intMax
		do maxHeight :: lib@intMax
	end func

	+**func load(node: xml@Node)
		do me.setProps(node, ["text"])
	end func

	+**func save(node: xml@Node)
		do node.setAttr("text", me.text)
	end func

	+*func draw(pageX: int, pageY: int)
		var x: float :: (me.absX - pageX) $ float
		var y: float :: (me.absY - pageY) $ float
		var width: float :: me.width $ float
		var height: float :: me.height $ float
		do draw@rect(x, y, width, height, 16#FFE1E1E1)
		do draw@rectLine(x, y, width, height, 16#FFADADAD)
	end func

	+**func updateProp(listView: wnd@ListView, x: int, y: int)
		var idx: int :: listView.len()
		do listView.add("text")
		do listView.setText(idx + 0, 1, me.text)
	end func

	+**func setProp(prop: []char, value: []char)
		switch(prop)
		case "text"
			do me.text :: value
		end switch
	end func

	+var text: []char
end class
