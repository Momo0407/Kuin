var wndObjProp: wnd@Wnd

class CtrlSet()
	+var name: []char
	+var label: wnd@Label
	+var edit: wnd@Edit
end class

class CtrlSetArray()
	+var idx: int
	+var ctrlSetArray: []@CtrlSet
end class

var ctrlSetArray: @CtrlSetArray
var target: \doc_ar@Obj

+func show(obj: \doc_ar@Obj)
	do @target :: obj
	do @wndObjProp :: wnd@makeWnd(\form@wndMain, (%fix $ wnd@WndStyle).or(%noMinimize), 300, 480, obj.name)

	do @ctrlSetArray :: #@CtrlSetArray
	do @ctrlSetArray.idx :: 0
	do @ctrlSetArray.ctrlSetArray :: #[^obj.props]@CtrlSet
	do obj.props.forEach(addCtrlSet, null)

	var btnOk: wnd@Btn :: wnd@makeBtn(@wndObjProp, 72, 445, 75, 23, %fix, %fix, "OK")
	do btnOk.onPush :: btnOkOnPush
	var btnCancel: wnd@Btn :: wnd@makeBtn(@wndObjProp, 153, 445, 75, 23, %fix, %fix, \common@langEn ?("Cancel", "キャンセル"))
	do btnCancel.onPush :: btnCancelOnPush

	do @wndObjProp.modal()

	do @wndObjProp :: null
	do @ctrlSetArray :: null
	do @target :: null

	func addCtrlSet(key: []char, value: []char, data: kuin@Class): bool
		var ctrlSet: @CtrlSet :: #@CtrlSet
		do ctrlSet.name :: key
		do ctrlSet.label :: wnd@makeLabel(@wndObjProp, 12, 15 + 25 * @ctrlSetArray.idx, 60, 12, %fix, %fix, key)
		do ctrlSet.edit :: wnd@makeEdit(@wndObjProp, 92, 12 + 25 * @ctrlSetArray.idx, 180, 19, %fix, %fix)
		do ctrlSet.edit.setText(value)
		do @ctrlSetArray.ctrlSetArray[@ctrlSetArray.idx] :: ctrlSet
		do @ctrlSetArray.idx :+ 1
		ret true
	end func

	func btnOkOnPush(wnd: wnd@WndBase)
		for i(0, ^@ctrlSetArray.ctrlSetArray - 1)
			var ctrlSet: @CtrlSet :: @ctrlSetArray.ctrlSetArray[i]
			do @target.props.add(ctrlSet.name, ctrlSet.edit.getText())
		end for
		do @wndObjProp.close()
	end func

	func btnCancelOnPush(wnd: wnd@WndBase)
		do @wndObjProp.close()
	end func
end func
