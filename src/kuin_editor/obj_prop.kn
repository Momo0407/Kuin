var wndObjProp: wnd@Wnd
var result: bool

class CtrlSet()
	+var name: []char
	+var label: wnd@Label
	+var ctrls: []wnd@WndBase
	+var type: \doc_ar@PropType
	+var typeData: [][]char
end class

class CtrlSetArray()
	+var idx: int
	+var ctrlSetArray: []@CtrlSet
end class

var ctrlSetArray: @CtrlSetArray
var target: \doc_ar@Obj

+func show(obj: \doc_ar@Obj): bool
	do @target :: obj
	do @wndObjProp :: wnd@makeWnd(\form@wndMain, (%fix $ wnd@WndStyle).or(%noMinimize), 300, 480, obj.name)

	do @ctrlSetArray :: #@CtrlSetArray
	do @ctrlSetArray.idx :: 0
	var propsNames: [][]char :: obj.propsNames()
	var propsTypes: []\doc_ar@PropType :: obj.propsTypes()
	var propsTypeDatas: [][][]char :: obj.propsTypeDatas()
	do @ctrlSetArray.ctrlSetArray :: #[^propsNames]@CtrlSet
	for i(0, ^propsNames - 1)
		var ctrlSet: @CtrlSet :: #@CtrlSet
		do ctrlSet.name :: propsNames[i]
		do ctrlSet.label :: wnd@makeLabel(@wndObjProp, 12, 15 + 25 * i, 60, 12, %fix, %fix, propsNames[i])
		switch(propsTypes[i])
		case %str, %int_, %float_, %color
			var edit: wnd@Edit :: wnd@makeEdit(@wndObjProp, 92, 12 + 25 * i, 180, 19, %fix, %fix)
			do edit.setText(obj.props.get(propsNames[i], &))
			do ctrlSet.ctrls :: [edit]
		case %bool_
			var chk: wnd@Chk :: wnd@makeChk(@wndObjProp, 92, 12 + 25 * i, 180, 16, %fix, %fix, propsNames[i])
			do chk.setChk(obj.props.get(propsNames[i], &) = "true")
			do ctrlSet.ctrls :: [chk]
		case %enum_
			var combo: wnd@Combo :: wnd@makeCombo(@wndObjProp, 92, 12 + 25 * i, 180, 20, %fix, %fix)
			var value: []char :: obj.props.get(propsNames[i], &)
			for j(0, ^propsTypeDatas[i] - 1)
				do combo.add(propsTypeDatas[i][j])
				if(propsTypeDatas[i][j] = value)
					do combo.setSel(j)
				end if
			end for
			do ctrlSet.ctrls :: [combo]
		case %file
			var edit: wnd@Edit :: wnd@makeEdit(@wndObjProp, 92, 12 + 25 * i, 80, 19, %fix, %fix)
			do edit.setText(obj.props.get(propsNames[i], &))
			var btn: wnd@Btn :: wnd@makeBtn(@wndObjProp, 172, 12 + 25 * i, 100, 23, %fix, %fix, \common@langEn ?("Browse...", "参照..."))
			do ctrlSet.ctrls :: [edit $ wnd@WndBase, btn $ wnd@WndBase]
		end switch
		do ctrlSet.type :: propsTypes[i]
		do ctrlSet.typeData :: propsTypeDatas[i]
		do @ctrlSetArray.ctrlSetArray[i] :: ctrlSet
	end for

	var btnOk: wnd@Btn :: wnd@makeBtn(@wndObjProp, 72, 445, 75, 23, %fix, %fix, "OK")
	do btnOk.onPush :: btnOkOnPush
	var btnCancel: wnd@Btn :: wnd@makeBtn(@wndObjProp, 153, 445, 75, 23, %fix, %fix, \common@langEn ?("Cancel", "キャンセル"))
	do btnCancel.onPush :: btnCancelOnPush

	do @result :: false
	do @wndObjProp.modal()

	do @wndObjProp :: null
	do @ctrlSetArray :: null
	do @target :: null

	ret @result

	func btnOkOnPush(wnd: wnd@WndBase)
		for i(0, ^@ctrlSetArray.ctrlSetArray - 1)
			var ctrlSet: @CtrlSet :: @ctrlSetArray.ctrlSetArray[i]
			var value: []char
			switch(ctrlSet.type)
			case %str
				do value :: (ctrlSet.ctrls[0] $ wnd@Edit).getText()
			case %int_
				var value2: int :: (ctrlSet.ctrls[0] $ wnd@Edit).getText().toInt(&)
				do value :: value2.toStr()
			case %float_
				var value2: float :: (ctrlSet.ctrls[0] $ wnd@Edit).getText().toFloat(&)
				do value :: value2.toStr()
				if(value.find('.', -1) = -1)
					do value :~ ".0"
				end if
			case %bool_
				do value :: (ctrlSet.ctrls[0] $ wnd@Chk).getChk() ?("true", "false")
			case %enum_
				var combo: wnd@Combo :: ctrlSet.ctrls[0] $ wnd@Combo
				var sel: int :: (combo).getSel()
				do value :: sel = -1 ?("", combo.getText(sel))
			case %color
				do value :: (ctrlSet.ctrls[0] $ wnd@Edit).getText()
			case %file
				do value :: (ctrlSet.ctrls[0] $ wnd@Edit).getText()
			end switch
			do @target.props.add(ctrlSet.name, value)
		end for
		do @result :: true
		do @wndObjProp.close()
	end func

	func btnCancelOnPush(wnd: wnd@WndBase)
		do @wndObjProp.close()
	end func
end func
