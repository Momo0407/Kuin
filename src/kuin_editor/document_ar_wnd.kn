+class DocumentArWnd(\document_ar@DocumentArBase)
	*func initFromMeta(src2: []char, ptr: &int)
		do me.obj2dRoot.color :: draw@white
		do me.initFromMetaRecursion(me.obj2dRoot, src2, &ptr)
	end func

	*func getMeta(): []char
		ret "wnd"
	end func

	*func makeObj2d(name: []char): \document_ar@Obj2d
		switch(name)
		case "Button"
			ret #Obj2dBtn
		end switch
		assert(false)
	end func

	class Obj2dBtn(\document_ar@Obj2d)
		+*func draw(pageX: int, pageY: int)
			do draw@rect((me.x - pageX) $ float, (me.y - pageY) $ float, me.width $ float, me.height $ float, 16#FF808080)
		end func

		+*func getSrc(): [][]char
			ret [""]
			; TODO:
		end func

		+*func readMeta(src: []char, ptr: &int)
			do me.readMetaBase(src, &ptr)
		end func

		+*func writeMeta(): []char
			ret me.writeMetaBase("btn")
		end func
	end class

	func initFromMetaRecursion(parent: \document_ar@Obj2d, src: []char, ptr: &int)
		var num: int
		do \document_ar@arBaseParseWord(src, &ptr).toInt(&num)
		for i(0, num - 1)
			var obj: \document_ar@Obj2d
			switch(\document_ar@arBaseParseWord(src, &ptr))
			case "btn"
				do obj :: #Obj2dBtn
			default
				ret
			end switch
			do obj.readMeta(src, &ptr)
			do parent.children.add(obj)
			do me.initFromMetaRecursion(obj, src, &ptr)
		end for
	end func
end class
