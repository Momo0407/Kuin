func main()
	var a: @BigFloat :: @makeBigFloatFromStr("100.0")
	var b: @BigFloat :: @makeBigFloatFromStr("3.0")
	var c: @BigFloat :: a.div(b)
	do cui@print(a.toStr() ~ "\n")
	do cui@print(b.toStr() ~ "\n")
	do cui@print(c.toStr() ~ "\n")
end func

const bigFloatSize: int :: 3
const bigFloatStrSize: int :: 50

+class BigInt()
	*func[__ndc]ctor()
	end func
	
	+*func cmp(t: kuin@Class): int
		var t2: @BigInt :: t $ @BigInt
		if(me.minus <> t2.minus)
			ret me.minus ?(-1, 1)
		end if
		ret @cmpImpl(me.value, t2.value) * (me.minus ?(-1, 1))
	end func
	
	+*func toStr(): []char
		if(^me.value = 1 & me.value[0] = 0b64)
			ret "0"
		end if
		var s: []char :: ""
		var tmp: @BigInt :: @makeBigInt()
		do tmp.value :: me.value
		do tmp.minus :: false
		var tmp2: @BigInt :: @makeBigInt()
		do tmp2.minus :: false
		var tmp3: @BigInt :: @makeBigIntFromInt(1000000000000000000)
		while(^tmp.value <> 1 | tmp.value[0] <> 0b64)
			do tmp2.value :: tmp.value
			do @divModImpl(tmp, tmp3, false)
			do @divModImpl(tmp2, tmp3, true)
			var s2: []char :: (tmp2.value[0] $ int).toStr()
			if((^tmp.value <> 1 | tmp.value[0] <> 0b64) & ^s2 < 18)
				do s2 :: "0".repeat(18 - ^s2) ~ s2
			end if
			do s :: s2 ~ s
		end while
		if(me.minus)
			do s :: "-" ~ s
		end if
		ret s
	end func
	
	+func toInt(): int
		if(me.minus)
			ret -(me.value[0] $ int)
		else
			ret me.value[0] $ int
		end if
	end func
	
	+func fromInt(value: int)
		if(value >= 0)
			do me.value :: [value $ bit64]
			do me.minus :: false
		else
			do me.value :: [(-value) $ bit64]
			do me.minus :: true
		end if
	end func
	
	+func fromStr(value: []char)
		var tmp: @BigInt :: @makeBigInt()
		var tmp2: @BigInt :: @makeBigIntFromInt(1000000000000000000)
		var tmp3: @BigInt :: @makeBigIntFromInt(1)
		var success: bool
		var start: int
		var minus: bool
		if(^value >= 1 & value[0] = '-')
			do start :: 1
			do minus :: true
		else
			do start :: 0
			do minus :: false
		end if
		do me.value :: [0b64]
		do me.minus :: false
		while(start < ^value & value[start] = '0')
			do start :+ 1
		end while
		var ptr: int :: ^value - 1
		while(ptr - 17 >= start)
			do tmp.value :: [value.sub(ptr - 17, 18).toBit64(&success)]
			if(!success)
				throw 0xE9170008
			end if
			do tmp.minus :: false
			do @mulImpl(tmp, tmp3)
			do @addImpl(me, tmp)
			do @mulImpl(tmp3, tmp2)
			do ptr :- 18
		end while
		if(ptr >= start)
			do tmp.value :: [value.sub(start, ptr - start + 1).toBit64(&success)]
			if(!success)
				throw 0xE9170008
			end if
			do tmp.minus :: false
			do @mulImpl(tmp, tmp3)
			do @addImpl(me, tmp)
		end if
		do me.minus :: minus
		if(^me.value = 1 & me.value[0] = 0b64)
			do me.minus :: false
		end if
	end func
	
	+func[__mki]add(me2: @BigInt, value: @BigInt): @BigInt
		do me2.value :: me.value
		do me2.minus :: me.minus
		do @addImpl(me2, value)
		ret me2
	end func
	
	+func[__mki]sub(me2: @BigInt, value: @BigInt): @BigInt
		var tmpMinus: bool :: value.minus
		do me2.value :: me.value
		do me2.minus :: me.minus
		do value.minus :: !value.minus
		do @addImpl(me2, value)
		do value.minus :: tmpMinus
		ret me2
	end func
	
	+func[__mki]mul(me2: @BigInt, value: @BigInt): @BigInt
		do me2.value :: me.value
		do me2.minus :: me.minus
		do @mulImpl(me2, value)
		ret me2
	end func
	
	+func[__mki]div(me2: @BigInt, value: @BigInt): @BigInt
		do me2.value :: me.value
		do me2.minus :: me.minus
		do @divModImpl(me2, value, false)
		ret me2
	end func
	
	+func[__mki]mod(me2: @BigInt, value: @BigInt): @BigInt
		do me2.value :: me.value
		do me2.minus :: me.minus
		do @divModImpl(me2, value, true)
		ret me2
	end func
	
	+func[__mki]pow(me2: @BigInt, value: @BigInt): @BigInt
		if(^value.value = 1 & !value.minus)
			switch(value.value[0])
			case 0b64
				do me2.value :: [1b64]
				do me2.minus :: false
				ret me2
			case 1b64
				do me2.value :: me.value
				do me2.minus :: me.minus
				ret me2
			case 2b64
				do me2.value :: me.value
				do me2.minus :: me.minus
				do @mulImpl(me2, me2)
				ret me2
			end switch
		end if
		if(^me.value = 1 & me.value[0] <= 1b64)
			if(me.minus)
				do me2.value :: [1b64]
				do me2.minus :: value.value[0].and(1b64) = 1b64
			else
				do me2.value :: me.value
				do me2.minus :: false
			end if
			ret me2
		end if
		if(value.minus)
			do me2.value :: [0b64]
			do me2.minus :: false
			ret me2
		end if
		var a: @BigInt :: @makeBigInt()
		do a.value :: me.value
		do a.minus :: me.minus
		do me2.value :: [1b64]
		do me2.minus :: false
		var c: []bit64 :: ##value.value
		while loop(true)
			if(c[0].and(1b64) = 1b64)
				do @mulImpl(me2, a)
			end if
			do c[0] :: c[0].shr(1)
			var notZero: int :: 0
			for i(1, ^c - 1)
				do c[i - 1] :: c[i - 1].or(c[i].shl(63))
				do c[i] :: c[i].shr(1)
				if(c[i] <> 0b64)
					do notZero :: i
				end if
			end for
			if(notZero = 0 & c[0] = 0b64)
				break loop
			end if
			do @mulImpl(a, a)
		end while
		ret me2
	end func
	
	+func[__mki]abs(me2: @BigInt): @BigInt
		do me2.value :: me.value
		do me2.minus :: false
		ret me2
	end func
	
	+var value: []bit64
	+var minus: bool
end class

+class BigFloat()
	*func[__ndc]ctor()
	end func
	
	+*func cmp(t: kuin@Class): int
		var t2: @BigFloat :: t $ @BigFloat
		if(me.significand.minus <> t2.significand.minus)
			ret me.significand.minus ?(-1, 1)
		end if
		if(me.inf_())
			if(t2.inf_())
				ret 0
			end if
			ret 1
		end if
		if(t2.inf_())
			ret -1
		end if
		ret @cmpImpl(me.significand.value, t2.significand.value) * (me.significand.minus ?(-1, 1))
	end func
	
	+*func toStr(): []char
		if(me.nan())
			ret "nan"
		end if
		if(me.inf_())
			if(me.significand.minus)
				ret "-inf"
			end if
			ret "inf"
		end if
		if(^me.significand.value = 1 & me.significand.value[0] = 0b64)
			ret "0"
		end if
		var v: []bit64 :: me.significand.value
		var a: []char
		var b: []char
		var n: int :: me.exponent + 1
		var a2: @BigInt :: @makeBigInt()
		if(me.exponent >= 0)
			var padding: int :: lib@padding(n, 64)
			do a2.value :: #[(n + padding) / 64]bit64
			for i(0, n - 1)
				if(v[^v - 1 - i / 64].and((1b64).shl(63 - i % 64)) <> 0b64)
					var index: int :: ^a2.value - 1 - (i + padding) / 64
					do a2.value[index] :: a2.value[index].or((1b64).shl(63 - (i + padding) % 64))
				end if
			end for
		else
			do a2.value :: [0b64]
		end if
		var tmp: @BigInt :: @makeBigIntFromInt(1)
		var tmp2: @BigInt :: @makeBigIntFromInt(5)
		var tmp3: @BigInt :: @makeBigIntFromInt(10)
		var b2: @BigInt :: @makeBigInt()
		var last: int :: ^v * 64 - 1
		while(n <= last & v[^v - 1 - last / 64].and((1b64).shl(63 - last % 64)) = 0b64)
			do last :- 1
		end while
		for i(n, last)
			do tmp :: tmp.mul(tmp2)
			do b2 :: b2.mul(tmp3)
			if(i >= 0 & v[^v - 1 - i / 64].and((1b64).shl(63 - i % 64)) <> 0b64)
				do b2 :: b2.add(tmp)
			end if
		end for
		if(^b2.value = 1 & b2.value[0] = 0b64)
			do b :: ""
		else
			var s: []char :: b2.toStr()
			if(^s < last - n + 1)
				do s :: "0".repeat(last - n + 1 - ^s) ~ s
			end if
			if(^s > @bigFloatStrSize)
				var carry: int :: (s[@bigFloatStrSize] $ int - '0' $ int) >= 5 ?(1, 0)
				var pos: int :: @bigFloatStrSize - 1
				while(pos >= 0 & carry = 1)
					var n2: int :: (s[pos] $ int - '0' $ int) + 1
					if(n2 >= 10)
						do n2 :- 10
					else
						do carry :: 0
					end if
					do s[pos] :: (n2 + '0' $ int) $ char
					do pos :- 1
				end while
				if(carry = 1)
					do a2 :: a2.add(@makeBigIntFromInt(1))
				end if
				do pos :: @bigFloatStrSize - 1
				while(pos >= 0 & s[pos] = '0')
					do pos :- 1
				end while
				if(pos >= 0)
					do s :: s.sub(0, pos + 1)
					do b :: "." ~ s
				else
					do b :: ""
				end if
			else
				do b :: "." ~ s
			end if
		end if
		do a :: a2.toStr()
		ret (me.significand.minus ?("-", "")) ~ a ~ b
	end func
	
	+func toFloat(): float
		var b: bit64 :: 0b64
		if(me.inf_())
			if(me.significand.minus)
				do b :: 0xFFF0000000000000b64
			else
				do b :: 0x7FF0000000000000b64
			end if
		elif(me.nan())
			do b :: 0xFFFFFFFFFFFFFFFFb64
		elif(^me.significand.value = 1 & me.significand.value[0] = 0b64)
			do b :: 0b64
		else
			var e: int :: me.exponent + 1023
			if(e < 0)
				do e :: 0
			end if
			if(e > 0x7FF)
				do e :: 0x7FF
			end if
			do b :: (me.significand.minus ?(1b64, 0b64)).shl(63).or((e $ bit64).shl(52)).or(me.significand.value[^me.significand.value - 1].and(0x7FFFFFFFFFFFFFFFb64).shr(11))
		end if
		ret lib@toFloatForcibly(b)
	end func
	
	+func fromFloat(value: float)
		var v: bit64 :: lib@toBit64Forcibly(value)
		var s: bit64 :: v.shr(63)
		var e: bit64 :: v.and(0x7FF0000000000000b64).shr(52)
		var f: bit64 :: v.and(0x000FFFFFFFFFFFFFb64)
		if(e = 0b64)
			do me.significand.value :: [0b64]
			do me.significand.minus :: false
			do me.exponent :: 0
			ret
		end if
		if(e = 0x7FFb64)
			if(f = 0b64)
				do me.significand.value :: #[0]bit64
				do me.significand.minus :: s = 1b64
				do me.exponent :: 0
				ret
			else
				do me.significand.value :: [0b64]
				do me.significand.minus :: true
				do me.exponent :: 0
				ret
			end if
		end if
		do me.significand.value :: [f.shl(11).or(0x8000000000000000b64)]
		do me.significand.minus :: s = 1b64
		do me.exponent :: e $ int - 1023
	end func
	
	+func fromStr(value: []char)
		var dot: int :: value.find('.', -1)
		var a: []char :: dot = -1 ?(value, value.sub(0, dot))
		var b: []char :: dot = -1 ?("0", value.sub(dot + 1, -1))
		do me.significand :: @makeBigIntFromStr(a)
		do me.exponent :: ^me.significand.value * 64 - 1
		do @normalizeFloat(me)
		var b2: []int :: #[^b]int
		for i(0, ^b2 - 1)
			var n: int :: b[i] $ int - '0' $ int
			if(n < 0 | 9 < n)
				throw 0xE9170008
			end if
			do b2[i] :: n
		end for
		var last: int :: ^b2 - 1
		while(0 <= last & b2[last] = 0)
			do last :- 1
		end while
		if(last = -1)
			ret
		end if
		if(last <> ^b2 - 1)
			do b2 :: b2.sub(0, last + 1)
		end if
		var pos: int :: me.exponent + 1
		if(^me.significand.value < @bigFloatSize)
			do me.significand.value :: #[@bigFloatSize - ^me.significand.value]bit64 ~ me.significand.value
		end if
		while(pos < @bigFloatSize * 64)
			var carry: int :: 0
			for i(^b2 - 1, 0, -1)
				do b2[i] :: b2[i] * 2 + carry
				if(b2[i] >= 10)
					do b2[i] :- 10
					do carry :: 1
				else
					do carry :: 0
				end if
			end for
			if(carry = 1)
				var pos2: int :: ^me.significand.value - 1 - pos / 64
				do me.significand.value[pos2] :: me.significand.value[pos2].or((1b64).shl(63 - pos % 64))
			end if
			do pos :+ 1
		end while
		do @normalizeFloat(me)
	end func
	
	+func inf_(): bool
		ret ^me.significand.value = 0
	end func
	
	+func nan(): bool
		var s: @BigInt :: me.significand
		ret ^s.value = 1 & s.value[0] = 0b64 & s.minus
	end func
	
	+func[__mki]add(me2: @BigFloat, value: @BigFloat): @BigFloat
		if(me.nan() | value.nan())
			do @setNaN(me2)
			ret me2
		end if
		do me2.significand :: me.significand
		do me2.exponent :: me.exponent
		do @addFloatImpl(me2, value)
		ret me2
	end func
	
	+func[__mki]sub(me2: @BigFloat, value: @BigFloat): @BigFloat
		if(me.nan() | value.nan())
			do @setNaN(me2)
			ret me2
		end if
		var tmpMinus: bool :: value.significand.minus
		do me2.significand :: me.significand
		do me2.exponent :: me.exponent
		do value.significand.minus :: !value.significand.minus
		do @addFloatImpl(me2, value)
		do value.significand.minus :: tmpMinus
		ret me2
	end func
	
	+func[__mki]mul(me2: @BigFloat, value: @BigFloat): @BigFloat
		if(me.nan() | value.nan())
			do @setNaN(me2)
			ret me2
		end if
		do me2.significand :: me.significand
		do me2.exponent :: me.exponent
		do @mulFloatImpl(me2, value)
		ret me2
	end func
	
	+func[__mki]div(me2: @BigFloat, value: @BigFloat): @BigFloat
		if(me.nan() | value.nan())
			do @setNaN(me2)
			ret me2
		end if
		if(me.inf_())
			if(value.inf_())
				do @setNaN(me2)
				ret me2
			end if
			do @setInf(me2, me.significand.minus <> value.significand.minus)
			ret me2
		end if
		if(value.inf_())
			do @setZeroFloat(me2)
			ret me2
		end if
		if(^me.significand.value = 1 & me.significand.value[0] = 0b64)
			if(^value.significand.value = 1 & value.significand.value[0] = 0b64)
				do @setNaN(me2)
				ret me2
			end if
			do @setZeroFloat(me2)
			ret me2
		end if
		if(^value.significand.value = 1 & value.significand.value[0] = 0b64)
			do @setInf(me2, me.significand.minus)
			ret me2
		end if
		var as: @BigInt :: ##me.significand
		var bs: @BigInt :: ##value.significand
		var aPos: int :: 0
		while(as.value[0].and((1b64).shl(aPos)) = 0b64)
			do aPos :+ 1
		end while
		var bPos: int :: 0
		while(bs.value[0].and((1b64).shl(bPos)) = 0b64)
			do bPos :+ 1
		end while
		do @shr(&as.value, aPos)
		do @shr(&bs.value, bPos)
		do aPos :: aPos - 64 * ^as.value + 1 + me.exponent
		do bPos :: bPos - 64 * ^bs.value + 1 + value.exponent
		do as.value :: #[@bigFloatSize]bit64 ~ as.value
		do aPos :- 64 * @bigFloatSize
		var r: @BigInt :: as.div(bs)
		do me2.significand :: r
		do me2.exponent :: 64 * ^r.value - 1 + aPos - bPos
		do @normalizeFloat(me2)
		ret me2
	end func
	
	+func[__mki]mod(me2: @BigFloat, value: @BigFloat): @BigFloat
		if(me.nan() | value.nan())
			do @setNaN(me2)
			ret me2
		end if
		; TODO:
	end func
	
	+func[__mki]pow(me2: @BigFloat, value: @BigFloat): @BigFloat
		if(me.nan() | value.nan())
			do @setNaN(me2)
			ret me2
		end if
		; TODO:
	end func
	
	+func[__mki]exp(me2: @BigFloat): @BigFloat
		if(me.nan())
			do @setNaN(me2)
			ret me2
		end if
		; TODO:
	end func
	
	+func[__mki]ln(me2: @BigFloat): @BigFloat
		if(me.nan())
			do @setNaN(me2)
			ret me2
		end if
		; TODO:
	end func
	
	+func[__mki]sqrt(me2: @BigFloat): @BigFloat
		if(me.nan())
			do @setNaN(me2)
			ret me2
		end if
		; TODO:
	end func
	
	+func[__mki]floor(me2: @BigFloat): @BigFloat
		if(me.nan())
			do @setNaN(me2)
			ret me2
		end if
		; TODO:
	end func
	
	+func[__mki]ceil(me2: @BigFloat): @BigFloat
		if(me.nan())
			do @setNaN(me2)
			ret me2
		end if
		; TODO:
	end func
	
	+func[__mki]cos(me2: @BigFloat): @BigFloat
		if(me.nan())
			do @setNaN(me2)
			ret me2
		end if
		; TODO:
	end func
	
	+func[__mki]sin(me2: @BigFloat): @BigFloat
		if(me.nan())
			do @setNaN(me2)
			ret me2
		end if
		; TODO:
	end func
	
	+func[__mki]tan(me2: @BigFloat): @BigFloat
		if(me.nan())
			do @setNaN(me2)
			ret me2
		end if
		; TODO:
	end func
	
	+func[__mki]acos(me2: @BigFloat): @BigFloat
		if(me.nan())
			do @setNaN(me2)
			ret me2
		end if
		; TODO:
	end func
	
	+func[__mki]asin(me2: @BigFloat): @BigFloat
		if(me.nan())
			do @setNaN(me2)
			ret me2
		end if
		; TODO:
	end func
	
	+func[__mki]atan(me2: @BigFloat): @BigFloat
		if(me.nan())
			do @setNaN(me2)
			ret me2
		end if
		; TODO:
	end func
	
	+func[__mki]cosh(me2: @BigFloat): @BigFloat
		if(me.nan())
			do @setNaN(me2)
			ret me2
		end if
		; TODO:
	end func
	
	+func[__mki]sinh(me2: @BigFloat): @BigFloat
		if(me.nan())
			do @setNaN(me2)
			ret me2
		end if
		; TODO:
	end func
	
	+func[__mki]tanh(me2: @BigFloat): @BigFloat
		if(me.nan())
			do @setNaN(me2)
			ret me2
		end if
		; TODO:
	end func
	
	+func[__mki]acosh(me2: @BigFloat): @BigFloat
		if(me.nan())
			do @setNaN(me2)
			ret me2
		end if
		; TODO:
	end func
	
	+func[__mki]asinh(me2: @BigFloat): @BigFloat
		if(me.nan())
			do @setNaN(me2)
			ret me2
		end if
		; TODO:
	end func
	
	+func[__mki]atanh(me2: @BigFloat): @BigFloat
		if(me.nan())
			do @setNaN(me2)
			ret me2
		end if
		; TODO:
	end func
	
	+func[__mki]abs(me2: @BigFloat): @BigFloat
		if(me.nan())
			do @setNaN(me2)
			ret me2
		end if
		; TODO:
	end func
	
	+var significand: @BigInt
	+var exponent: int
end class

+func[__mki]makeBigInt(me2: @BigInt): @BigInt
	do me2.value :: [0b64]
	do me2.minus :: false
	ret me2
end func

+func[__mki]makeBigIntFromInt(me2: @BigInt, value: int): @BigInt
	do me2.fromInt(value)
	ret me2
end func

+func[__mki]makeBigIntFromStr(me2: @BigInt, value: []char): @BigInt
	do me2.fromStr(value)
	ret me2
end func

+func[__mki]makeBigFloat(me2: @BigFloat): @BigFloat
	do me2.significand :: @makeBigInt()
	do me2.exponent :: 0
	ret me2
end func

+func[__mki]makeBigFloatE(me2: @BigFloat): @BigFloat
	do me2.significand :: @makeBigInt()
	; TODO:
end func

+func[__mki]makeBigFloatFromFloat(me2: @BigFloat, value: float): @BigFloat
	do me2.significand :: @makeBigInt()
	do me2.fromFloat(value)
	ret me2
end func

+func[__mki]makeBigFloatFromStr(me2: @BigFloat, value: []char): @BigFloat
	do me2.significand :: @makeBigInt()
	do me2.fromStr(value)
	ret me2
end func

+func[__mki]makeBigFloatPi(me2: @BigFloat): @BigFloat
	do me2.significand :: @makeBigInt()
	; TODO:
end func

func addImpl(a: @BigInt, b: @BigInt)
	if(a.minus)
		if(b.minus)
			do a.value :: @addBit64s(a.value, b.value)
		else
			do a.value :: @trim(@subBit64s(b.value, a.value, &a.minus))
		end if
	else
		if(b.minus)
			do a.value :: @trim(@subBit64s(a.value, b.value, &a.minus))
		else
			do a.value :: @addBit64s(a.value, b.value)
		end if
	end if
end func

func mulImpl(a: @BigInt, b: @BigInt)
	var a2: []bit64 :: a.value
	var b2: []bit64 :: b.value
	var size: int :: 1
	while(size < ^a2 | size < ^b2)
		do size :* 2
	end while
	if(^a2 < size)
		do a2 :: a2 ~ #[size - ^a2]bit64
	end if
	if(^b2 < size)
		do b2 :: b2 ~ #[size - ^b2]bit64
	end if
	do a.value :: @trim(mul64Recursion(a2, b2))
	do a.minus :: a.minus <> b.minus
	if(^a.value = 1 & a.value[0] = 0b64)
		do a.minus :: false
	end if
	
	func mul64Recursion(a: []bit64, b: []bit64): []bit64
		if(^a = 1)
			ret mul64Last(a[0], b[0])
		end if
		var half: int :: ^a / 2
		var x0: []bit64 :: a.sub(0, half)
		var y0: []bit64 :: b.sub(0, half)
		var x1: []bit64 :: a.sub(half, -1)
		var y1: []bit64 :: b.sub(half, -1)
		var z2: []bit64 :: mul64Recursion(x1, y1)
		var z0: []bit64 :: mul64Recursion(x0, y0)
		var minus0: bool
		var x1x0: []bit64 :: @subBit64s(x1, x0, &minus0)
		var minus1: bool
		var y1y0: []bit64 :: @subBit64s(y1, y0, &minus1)
		var z1: []bit64
		if(minus0 = minus1)
			do z1 :: @subBit64s(@addBit64s(z2, z0), mul64Recursion(x1x0, y1y0), &)
		else
			do z1 :: @addBit64s(@addBit64s(z2, z0), mul64Recursion(x1x0, y1y0))
		end if
		ret @addBit64s(@addBit64s(#[^a]bit64 ~ z2, #[half]bit64 ~ z1), z0)
	end func
	
	func mul64Last(a: bit64, b: bit64): []bit64
		var x0: bit64 :: a.and(0xFFFFFFFFb64)
		var y0: bit64 :: b.and(0xFFFFFFFFb64)
		var x1: bit64 :: a.shr(32)
		var y1: bit64 :: b.shr(32)
		var z2Array: []bit64 :: [x1 * y1]
		var z0Array: []bit64 :: [x0 * y0]
		var minus0: bool :: x1 < x0
		var x1x0: bit64 :: minus0 ?(x0 - x1, x1 - x0)
		var minus1: bool :: y1 < y0
		var y1y0: bit64 :: minus1 ?(y0 - y1, y1 - y0)
		var z1: []bit64
		if(minus0 = minus1)
			do z1 :: @subBit64s(@addBit64s(z2Array, z0Array), [x1x0 * y1y0], &)
		else
			do z1 :: @addBit64s(@addBit64s(z2Array, z0Array), [x1x0 * y1y0])
		end if
		if(^z1 = 1)
			do z1 :: [z1[0].and(0xFFFFFFFFb64).shl(32), z1[0].shr(32)]
		else
			do z1 :: [z1[0].and(0xFFFFFFFFb64).shl(32), z1[0].shr(32).or(z1[1].and(0xFFFFFFFFb64).shl(32))]
		end if
		ret @addBit64s(@addBit64s(#[1]bit64 ~ z2Array, z1), z0Array)
	end func
end func

func divModImpl(a: @BigInt, b: @BigInt, mod: bool)
	var a2: []bit64 :: a.value
	var b2: []bit64 :: b.value
	var q: []bit64 :: #[^a2]bit64
	var r: []bit64 :: [0b64]
	for i(^a2 - 1, 0, -1)
		for j(63, 0, -1)
			var carry: bool :: r[^r - 1].shr(63) = 1b64
			for k(^r - 1, 0, -1)
				do r[k] :: r[k].shl(1)
				if(k > 0)
					do r[k] :: r[k].or(r[k - 1].shr(63))
				end if
			end for
			if(carry)
				do r :~ [1b64]
			end if
			do r[0] :: r[0].or(a2[i].shr(j).and(1b64))
			if(@cmpImpl(r, b2) >= 0)
				do r :: @subBit64s(r, b2, &)
				do q[i] :: q[i].or((1b64).shl(j))
			end if
		end for
	end for
	if(mod)
		do a.value :: r
	else
		do a.value :: @trim(q)
		do a.minus :: a.minus <> b.minus
	end if
	if(^a.value = 1 & a.value[0] = 0b64)
		do a.minus :: false
	end if
end func

func addBit64s(a: []bit64, b: []bit64): []bit64
	var r: []bit64 :: #[^a >= ^b ?(^a, ^b)]bit64
	var carry: bool :: false
	for i(0, ^r - 1)
		var a2: bit64 :: i >= ^a ?(0b64, a[i])
		var b2: bit64 :: i >= ^b ?(0b64, b[i])
		var r2: bit64 :: 0b64
		var carry2: bool :: false
		if(a2 > lib@bit64Max - b2)
			do carry2 :: true
		end if
		do r2 :: a2 + b2
		if(carry)
			if(r2 > lib@bit64Max - 1b64)
				do carry2 :: true
			end if
			do r2 :+ 1b64
		end if
		do r[i] :: r2
		do carry :: carry2
	end for
	if(carry)
		do r :~ [1b64]
	end if
	ret r
end func

func subBit64s(a: []bit64, b: []bit64, carry: &bool): []bit64
	var r: []bit64 :: #[^a >= ^b ?(^a, ^b)]bit64
	do carry :: false
	for i(0, ^r - 1)
		var a2: bit64 :: i >= ^a ?(0b64, a[i])
		var b2: bit64 :: i >= ^b ?(0b64, b[i])
		var r2: bit64 :: 0b64
		var carry2: bool :: false
		if(a2 < b2)
			do carry2 :: true
		end if
		do r2 :: a2 - b2
		if(carry)
			if(r2 < 1b64)
				do carry2 :: true
			end if
			do r2 :- 1b64
		end if
		do r[i] :: r2
		do carry :: carry2
	end for
	if(carry)
		var added: bool :: false
		for i(0, ^r - 1)
			do r[i] :: r[i].not()
			if(!added)
				if(r[i] <> lib@bit64Max)
					do added :: true
				end if
				do r[i] :+ 1b64
			end if
		end for
	end if
	ret r
end func

func trim(n: []bit64): []bit64
	for i(^n - 1, 0, -1)
		if(n[i] <> 0b64)
			ret i = ^n - 1 ?(n, n.sub(0, i + 1))
		end if
	end for
	ret [0b64]
end func

func cmpImpl(a: []bit64, b: []bit64): int
	if(^a <> ^b)
		if(^a > ^b)
			ret 1
		else
			ret -1
		end if
	end if
	
	for i(^a - 1, 0, -1)
		if(a[i] > b[i])
			ret 1
		elif(a[i] < b[i])
			ret -1
		end if
	end for
	ret 0
end func

func shl(n: &[]bit64, v: int)
	if(^n = 1 & n[0] = 0b64 | v = 0)
		ret
	end if
	if(v >= 64)
		do n :: #[v / 64]bit64 ~ n
		do v :% 64
	end if
	if(v <> 0)
		var carry: bit64 :: n[^n - 1].shr(64 - v)
		for i(^n - 1, 1, -1)
			do n[i] :: n[i].shl(v).or(n[i - 1].shr(64 - v))
		end for
		do n[0] :: n[0].shl(v)
		if(carry <> 0b64)
			do n :~ [carry]
		end if
	end if
end func

func shr(n: &[]bit64, v: int)
	if(^n = 1 & n[0] = 0b64 | v = 0)
		ret
	end if
	if(v >= 64)
		var offset: int :: v / 64
		if(offset >= ^n)
			do n :: [0b64]
			ret
		end if
		do n :: n.sub(offset, -1)
		do v :% 64
	end if
	if(v <> 0)
		for i(0, ^n - 2)
			do n[i] :: n[i].shr(v).or(n[i + 1].shl(64 - v))
		end for
		do n[^n - 1] :: n[^n - 1].shr(v)
		if(n[^n - 1] = 0b64 & ^n > 1)
			do n :: n.sub(0, ^n - 1)
		end if
	end if
end func

func normalizeFloat(n: @BigFloat)
	if(^n.significand.value = 0 | ^n.significand.value = 1 & n.significand.value[0] = 0b64)
		do n.exponent :: 0
		ret
	end if
	var v: bit64 :: n.significand.value[^n.significand.value - 1]
	if(v.shr(63) = 1b64)
		ret
	end if
	var offset: int :: 1
	while(v.shr(63 - offset) = 0b64)
		do offset :+ 1
	end while
	do @shl(&n.significand.value, offset)
	do n.exponent :- offset
	
	var pos: int :: ^n.significand.value - @bigFloatSize
	if(pos < 0)
		do pos :: 0
	end if
	while(pos < ^n.significand.value - 1 & n.significand.value[pos] = 0b64)
		do pos :+ 1
	end while
	do n.significand.value :: n.significand.value.sub(pos, -1)
end func

func setNaN(n: @BigFloat)
	do n.significand :: @makeBigInt()
	do n.significand.value :: [0b64]
	do n.significand.minus :: true
	do n.exponent :: 0
end func

func setInf(n: @BigFloat, minus: bool)
	do n.significand :: @makeBigInt()
	do n.significand.value :: #[0]bit64
	do n.significand.minus :: minus
	do n.exponent :: 0
end func

func setZeroFloat(n: @BigFloat)
	do n.significand :: @makeBigInt()
	do n.significand.value :: [0b64]
	do n.significand.minus :: false
	do n.exponent :: 0
end func

func addFloatImpl(a: @BigFloat, value: @BigFloat)
	if(a.inf_())
		if(^value.significand.value = 0 & a.significand.minus <> value.significand.minus)
			do @setNaN(a)
		end if
		ret
	end if
	if(value.inf_())
		do @setInf(a, value.significand.minus)
		ret
	end if
	if((a.exponent - value.exponent).abs() >= @bigFloatSize * 64 | ^value.significand.value = 1 & value.significand.value[0] = 0b64)
		ret
	end if
	if(^a.significand.value = 1 & a.significand.value[0] = 0b64)
		do a.significand :: @makeBigInt()
		do a.significand.value :: value.significand.value
		do a.significand.minus :: value.significand.minus
		do a.exponent :: value.exponent
		ret
	end if
	var as: @BigInt :: a.significand
	var bs: @BigInt :: value.significand
	var aPos: int :: a.exponent - ^as.value * 64
	var bPos: int :: value.exponent - ^bs.value * 64
	var min: int :: lib@min(aPos, bPos)
	if(aPos > min)
		var a2: @BigInt :: @makeBigInt()
		do a2.value :: ##as.value
		do @shl(&a2.value, aPos - min)
		do a2.minus :: as.minus
		do as :: a2
	elif(bPos > min)
		var b2: @BigInt :: @makeBigInt()
		do b2.value :: ##bs.value
		do @shl(&b2.value, bPos - min)
		do b2.minus :: bs.minus
		do bs :: b2
	end if
	var r: @BigInt :: as.add(bs)
	do a.significand :: r
	do a.exponent :: min + ^r.value * 64
	do @normalizeFloat(a)
end func

func mulFloatImpl(a: @BigFloat, b: @BigFloat)
	if(a.inf_() | b.inf_())
		do @setInf(a, a.significand.minus <> b.significand.minus)
		ret
	end if
	if(^a.significand.value = 1 & a.significand.value[0] = 0b64 | ^b.significand.value = 1 & b.significand.value[0] = 0b64)
		do @setZeroFloat(a)
		ret
	end if
	var len: int :: a.exponent
	var pos: int :: ^a.significand.value * 64 - 1 - a.exponent + ^b.significand.value * 64 - 1 - b.exponent
	var r: @BigInt :: a.significand.mul(b.significand)
	do a.significand :: r
	do a.exponent :: ^r.value * 64 - pos - 1
	do @normalizeFloat(a)
end func
