+func [d0001.knd, _render] render()
end func

+func [d0001.knd, _viewport] viewport(x: float, y: float, w: float, h: float)
end func

+func [d0001.knd, _resetViewport] resetViewport()
end func

+func [d0001.knd, _depth] depth(test: bool, write: bool)
end func

+enum Blend
	none
	alpha
	add
	sub
	mul
end enum

+func [d0001.knd, _blend] blend(kind: @Blend)
end func

+enum Sampler
	point
	linear
end enum

+func [d0001.knd, _sampler] sampler(kind: @Sampler)
end func

+func [d0001.knd, _clearColor] clearColor(r: float, g: float, b: float)
end func

+func [d0001.knd, _tri] tri(x1: float, y1: float, x2: float, y2: float, x3: float, y3: float, r: float, g: float, b: float, a: float)
end func

+func [d0001.knd, _rect] rect(x: float, y: float, w: float, h: float, r: float, g: float, b: float, a: float)
end func

+func [d0001.knd, _circle] circle(x: float, y: float, radiusX: float, radiusY: float, r: float, g: float, b: float, a: float)
end func

+class Tex()
	+func [d0001.knd, _texDraw] draw(dstX: float, dstY: float, srcX: float, srcY: float, srcW: float, srcH: float)
	end func

	+func [d0001.knd, _texDrawScale] drawScale(dstX: float, dstY: float, dstW: float, dstH: float, srcX: float, srcY: float, srcW: float, srcH: float)
	end func

	var raw: int
	var aligned: int
	var tex: int
	var view: int
end class

+func [d0001.knd, _makeTex, _make_instance] makeTex(me2: @Tex, path: []char): @Tex
end func

+class Obj()
	var elementNum: int
	var elementKinds: int
	var elements: int
end class

+func [d0001.knd, _makeObj, _make_instance] makeObj(me2: @Obj, path: []char): @Obj
end func
