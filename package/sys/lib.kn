+const pi: float :: 3.14159265358979323846
+const e: float :: 2.71828182845904523536
+const intMin: int :: -9223372036854775807 - 1
+const intMax: int :: 9223372036854775807

+func [d0000.knd, _cmdLine] cmdLine(): [][]char
end func

+func [_ret_code] retCode(code: int)
end func

+func [d0000.knd, _rnd] rnd(min: int, max: int): int
end func

+func [d0000.knd, _rndFloat] rndFloat(min: float, max: float): float
end func

+func [d0000.knd, _rndBit64] rndBit64(): bit64
end func

+func [d0000.knd, _cos] cos(x: float): float
end func

+func [d0000.knd, _sin] sin(x: float): float
end func

+func [d0000.knd, _tan] tan(x: float): float
end func

+func [d0000.knd, _acos] acos(x: float): float
end func

+func [d0000.knd, _asin] asin(x: float): float
end func

+func [d0000.knd, _atan] atan(x: float): float
end func

+func [d0000.knd, _cosh] cosh(x: float): float
end func

+func [d0000.knd, _sinh] sinh(x: float): float
end func

+func [d0000.knd, _tanh] tanh(x: float): float
end func

+func [d0000.knd, _acosh] acosh(x: float): float
end func

+func [d0000.knd, _asinh] asinh(x: float): float
end func

+func [d0000.knd, _atanh] atanh(x: float): float
end func

+func [d0000.knd, _sqrt] sqrt(x: float): float
end func

+func [d0000.knd, _exp] exp(x: float): float
end func

+func [d0000.knd, _ln] ln(x: float): float
end func

+func [d0000.knd, _log] log(base: float, x: float): float
end func

+func [d0000.knd, _floor] floor(x: float): float
end func

+func [d0000.knd, _ceil] ceil(x: float): float
end func

+func [d0000.knd, _round] round(x: float, precision: int): float
end func

+func [d0000.knd, _rot] rot(x: &float, y: &float, centerX: float, centerY: float, angle: float)
end func

+func [d0000.knd, _invRot] invRot(x: float, y: float, centerX: float, centerY: float): float
end func

+func [d0000.knd, _dist] dist(x: float, y: float, centerX: float, centerY: float): float
end func

+func [d0000.knd, _chase] chase(x: &float, target: float, vel: float): bool
end func

+func [d0000.knd, _hash] hash(data: []bit8): []bit8
end func

+func [d0000.knd, _encrypt] encrypt(data: []bit8, key: []bit8): []bit8
end func

+func [d0000.knd, _decrypt] decrypt(data: []bit8, key: []bit8): []bit8
end func
