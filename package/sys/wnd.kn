func [d0001.knd, _init] _init()
end func

func [d0001.knd] _fin()
end func

+func [d0001.knd, _act] act(): bool
end func

+enum WndStyle
	normal
	fix
	aspect
	mdi
	mdiChild
	dock
	dockChild
end enum

+enum Anchor
	fix
	move
	scale
end enum

+class WndBase(kuin@ResClass)
	*func [d0001.knd, _wndBaseDtor, _force] _dtor()
	end func

	+func [d0001.knd, _wndBaseGetSize] getSize(width: &int, height: &int)
	end func

	+func [d0001.knd, _wndBasePaint] paint()
	end func

	+func [d0001.knd, _wndBaseFocus] focus()
	end func

	+func [d0001.knd, _wndBaseEnable] enable(isEnabled: bool)
	end func

	var kind: int
	var handle: int
	var defaultWndProc: int
	var ctrlFlag: int
	var defaultRect: int
end class

+class Wnd(@WndBase)
	*func [d0001.knd, _wndBaseDtor, _force] _dtor()
	end func

	+func [d0001.knd, _wndSetText] setText(text: []char)
	end func

	+func [d0001.knd, _wndGetText] getText(): []char
	end func

	+func [d0001.knd, _wndClose] close()
	end func

	+func [d0001.knd, _wndExit] exit()
	end func

	+func [d0001.knd, _wndMinMax] minMax(minWidth: int, minHeight: int, maxWidth: int, maxHeight: int)
	end func

	+func [d0001.knd, _wndSetMenu] setMenu(menu: @Menu)
	end func

	+func [d0001.knd, _wndActive] active(): bool
	end func

	+func modal()
		do me.setModalLock()
		while(@act() & me.modalLock)
		end while
	end func

	func [d0001.knd, _wndSetModalLock] setModalLock()
	end func

	+var minMaxRect: int
	+var onClose: func<(@WndBase): bool>
	+var onPushMenu: func<(@WndBase, int)>
	+var modalLock: bool
end class

+enum ShiftCtrl
	none
	shift :: 16#01
	ctrl :: 16#02
end enum

+class Draw(@WndBase)
	*func [d0001.knd, _drawDtor, _force] _dtor()
	end func

	+func [d0001.knd, _drawShowCaret] showCaret(height: int, font: draw@Font)
	end func

	+func [d0001.knd, _drawHideCaret] hideCaret()
	end func

	+func [d0001.knd, _drawMoveCaret] moveCaret(x: int, y: int)
	end func

	var equalMagnification: int
	var drawBuf: int
	+var onPaint: func<(@WndBase, int, int)>
	+var onMouseDownL: func<(@WndBase, int, int)>
	+var onMouseDownR: func<(@WndBase, int, int)>
	+var onMouseDownM: func<(@WndBase, int, int)>
	+var onMouseUpL: func<(@WndBase, int, int)>
	+var onMouseUpR: func<(@WndBase, int, int)>
	+var onMouseUpM: func<(@WndBase, int, int)>
	+var onMouseMove: func<(@WndBase, int, int)>
	+var onMouseEnter: func<(@WndBase, int, int)>
	+var onMouseLeave: func<(@WndBase)>
	+var onMouseWheelX: func<(@WndBase)>
	+var onMouseWheelY: func<(@WndBase)>
	+var onFocus: func<(@WndBase, bool)>
	+var onKeyDown: func<(@WndBase, input@Key, @ShiftCtrl)>
	+var onKeyUp: func<(@WndBase, input@Key, @ShiftCtrl)>
	+var onKeyChar: func<(@WndBase, char)>
	+var onScrollX: func<(@WndBase, int)>
	+var onScrollY: func<(@WndBase, int)>
end class

+class Btn(@WndBase)
	*func [d0001.knd, _wndBaseDtor, _force] _dtor()
	end func

	+func [d0001.knd, _wndSetText] setText(text: []char)
	end func

	+func [d0001.knd, _wndGetText] getText(): []char
	end func

	+var onPush: func<(@WndBase)>
end class

+class Chk(@WndBase)
	*func [d0001.knd, _wndBaseDtor, _force] _dtor()
	end func

	+func [d0001.knd, _wndSetText] setText(text: []char)
	end func

	+func [d0001.knd, _wndGetText] getText(): []char
	end func

	+func [d0001.knd, _btnSetChk] setChk(value: bool)
	end func

	+func [d0001.knd, _btnGetChk] getChk(): bool
	end func
end class

+class Radio(@WndBase)
	*func [d0001.knd, _wndBaseDtor, _force] _dtor()
	end func

	+func [d0001.knd, _wndSetText] setText(text: []char)
	end func

	+func [d0001.knd, _wndGetText] getText(): []char
	end func

	+func [d0001.knd, _btnSetChk] setChk(value: bool)
	end func

	+func [d0001.knd, _btnGetChk] getChk(): bool
	end func
end class

+class Edit(@WndBase)
	*func [d0001.knd, _wndBaseDtor, _force] _dtor()
	end func

	+func [d0001.knd, _wndSetText] setText(text: []char)
	end func

	+func [d0001.knd, _wndGetText] getText(): []char
	end func

	+func [d0001.knd, _wndReadonly] readonly(flag: bool)
	end func
end class

+class EditMulti(@WndBase)
	*func [d0001.knd, _wndBaseDtor, _force] _dtor()
	end func

	+func [d0001.knd, _wndSetText] setText(text: []char)
	end func

	+func [d0001.knd, _wndGetText] getText(): []char
	end func

	+func [d0001.knd, _wndReadonly] readonly(flag: bool)
	end func
end class

+class List(@WndBase)
	*func [d0001.knd, _wndBaseDtor, _force] _dtor()
	end func

	+func [d0001.knd, _listClear] clear()
	end func

	+func [d0001.knd, _listAdd] add(text: []char)
	end func

	+func [d0001.knd, _listIns] ins(idx: int, text: []char)
	end func

	+func [d0001.knd, _listDel] del(idx: int)
	end func

	+func [d0001.knd, _listLen] len(): int
	end func

	+func [d0001.knd, _listSetSel] setSel(idx: int)
	end func

	+func [d0001.knd, _listGetSel] getSel(): int
	end func

	+func [d0001.knd, _listSetText] setText(idx: int, text: []char)
	end func

	+func [d0001.knd, _listGetText] getText(idx: int): []char
	end func

	+var onSel: func<(@WndBase)>
end class

+class Combo(@WndBase)
	*func [d0001.knd, _wndBaseDtor, _force] _dtor()
	end func
end class

+class ComboList(@WndBase)
	*func [d0001.knd, _wndBaseDtor, _force] _dtor()
	end func
end class

+class Label(@WndBase)
	*func [d0001.knd, _wndBaseDtor, _force] _dtor()
	end func

	+func [d0001.knd, _wndSetText] setText(text: []char)
	end func

	+func [d0001.knd, _wndGetText] getText(): []char
	end func
end class

+class Group(@WndBase)
	*func [d0001.knd, _wndBaseDtor, _force] _dtor()
	end func

	+func [d0001.knd, _wndSetText] setText(text: []char)
	end func

	+func [d0001.knd, _wndGetText] getText(): []char
	end func
end class

+class Calendar(@WndBase)
	*func [d0001.knd, _wndBaseDtor, _force] _dtor()
	end func
end class

+class Progress(@WndBase)
	*func [d0001.knd, _wndBaseDtor, _force] _dtor()
	end func
end class

+class Rebar(@WndBase)
	*func [d0001.knd, _wndBaseDtor, _force] _dtor()
	end func
end class

+class Status(@WndBase)
	*func [d0001.knd, _wndBaseDtor, _force] _dtor()
	end func
end class

+class Toolbar(@WndBase)
	*func [d0001.knd, _wndBaseDtor, _force] _dtor()
	end func
end class

+class Trackbar(@WndBase)
	*func [d0001.knd, _wndBaseDtor, _force] _dtor()
	end func
end class

+class LabelLink(@WndBase)
	*func [d0001.knd, _wndBaseDtor, _force] _dtor()
	end func
end class

+class ListView(@WndBase)
	*func [d0001.knd, _wndBaseDtor, _force] _dtor()
	end func
end class

+class Pager(@WndBase)
	*func [d0001.knd, _wndBaseDtor, _force] _dtor()
	end func
end class

+class Tab(@WndBase)
	*func [d0001.knd, _wndBaseDtor, _force] _dtor()
	end func
end class

+class Tree(@WndBase)
	*func [d0001.knd, _wndBaseDtor, _force] _dtor()
	end func
end class

+class SplitBase(@WndBase)
	*func [d0001.knd, _wndBaseDtor, _force] _dtor()
	end func
end class

+class SplitX(@SplitBase)
	*func [d0001.knd, _wndBaseDtor, _force] _dtor()
	end func
end class

+class SplitY(@SplitBase)
	*func [d0001.knd, _wndBaseDtor, _force] _dtor()
	end func
end class

+class ScrollBase(@WndBase)
	*func [d0001.knd, _wndBaseDtor, _force] _dtor()
	end func

	+func [d0001.knd, _scrollSetState] setState(min: int, max: int, page: int, value: int)
	end func
end class

+class ScrollX(@ScrollBase)
	*func [d0001.knd, _wndBaseDtor, _force] _dtor()
	end func
end class

+class ScrollY(@ScrollBase)
	*func [d0001.knd, _wndBaseDtor, _force] _dtor()
	end func
end class

+enum MsgBoxIcon
	none
	err :: 16#10
	question :: 16#20
	warn :: 16#30
	info :: 16#40
end enum

+enum MsgBoxBtn
	ok
	okCancel
	abortRetryIgnore
	yesNoCancel
	yesNo
	retryCancel
	cancelAgainContinue
end enum

+enum MsgBoxResult
	ok :: 1
	cancel
	abort
	retry
	ignore
	yes
	no
	again :: 10
	continue
end enum

+func [d0001.knd, _onKeyPress] onKeyPress(onKeyPressFunc: func<(input@Key, @ShiftCtrl): bool>)
end func

+func [d0001.knd, _msgBox] msgBox(parent: @WndBase, text: []char, title: []char, icon: @MsgBoxIcon, btn: @MsgBoxBtn): @MsgBoxResult
end func

+func [d0001.knd, _openFileDialog] openFileDialog(parent: @WndBase, filter: [][]char, defaultFilter: int): []char
end func

+func [d0001.knd, _saveFileDialog] saveFileDialog(parent: @WndBase, filter: [][]char, defaultFilter: int, defaultExt: []char): []char
end func

+func [d0001.knd, _setClipboardStr] setClipboardStr(str: []char)
end func

+func [d0001.knd, _getClipboardStr] getClipboardStr(): []char
end func

+func [d0001.knd, _makeWnd, _make_instance] makeWnd(me2: @Wnd, parent: @WndBase, style: @WndStyle, width: int, height: int, text: []char): @Wnd
end func

+func [d0001.knd, _makeDraw, _make_instance] makeDraw(me2: @Draw, parent: @WndBase, x: int, y: int, width: int, height: int, anchorX: @Anchor, anchorY: @Anchor, equalMagnification: bool): @Draw
end func

+func [d0001.knd, _makeBtn, _make_instance] makeBtn(me2: @Btn, parent: @WndBase, x: int, y: int, width: int, height: int, anchorX: @Anchor, anchorY: @Anchor, text: []char): @Btn
end func

+func [d0001.knd, _makeChk, _make_instance] makeChk(me2: @Chk, parent: @WndBase, x: int, y: int, width: int, height: int, anchorX: @Anchor, anchorY: @Anchor, text: []char): @Chk
end func

+func [d0001.knd, _makeRadio, _make_instance] makeRadio(me2: @Radio, parent: @WndBase, x: int, y: int, width: int, height: int, anchorX: @Anchor, anchorY: @Anchor, text: []char): @Radio
end func

+func [d0001.knd, _makeEdit, _make_instance] makeEdit(me2: @Edit, parent: @WndBase, x: int, y: int, width: int, height: int, anchorX: @Anchor, anchorY: @Anchor): @Edit
end func

+func [d0001.knd, _makeEditMulti, _make_instance] makeEditMulti(me2: @EditMulti, parent: @WndBase, x: int, y: int, width: int, height: int, anchorX: @Anchor, anchorY: @Anchor): @EditMulti
end func

+func [d0001.knd, _makeList, _make_instance] makeList(me2: @List, parent: @WndBase, x: int, y: int, width: int, height: int, anchorX: @Anchor, anchorY: @Anchor): @List
end func

+func [d0001.knd, _makeCombo, _make_instance] makeCombo(me2: @Combo, parent: @WndBase, x: int, y: int, width: int, height: int, anchorX: @Anchor, anchorY: @Anchor): @Combo
end func

+func [d0001.knd, _makeComboList, _make_instance] makeComboList(me2: @ComboList, parent: @WndBase, x: int, y: int, width: int, height: int, anchorX: @Anchor, anchorY: @Anchor): @ComboList
end func

+func [d0001.knd, _makeLabel, _make_instance] makeLabel(me2: @Label, parent: @WndBase, x: int, y: int, width: int, height: int, anchorX: @Anchor, anchorY: @Anchor, text: []char): @Label
end func

+func [d0001.knd, _makeGroup, _make_instance] makeGroup(me2: @Group, parent: @WndBase, x: int, y: int, width: int, height: int, anchorX: @Anchor, anchorY: @Anchor, text: []char): @Group
end func

+func [d0001.knd, _makeCalendar, _make_instance] makeCalendar(me2: @Calendar, parent: @WndBase, x: int, y: int, width: int, height: int, anchorX: @Anchor, anchorY: @Anchor): @Calendar
end func

+func [d0001.knd, _makeProgress, _make_instance] makeProgress(me2: @Progress, parent: @WndBase, x: int, y: int, width: int, height: int, anchorX: @Anchor, anchorY: @Anchor): @Progress
end func

+func [d0001.knd, _makeRebar, _make_instance] makeRebar(me2: @Rebar, parent: @WndBase, x: int, y: int, width: int, height: int, anchorX: @Anchor, anchorY: @Anchor): @Rebar
end func

+func [d0001.knd, _makeStatus, _make_instance] makeStatus(me2: @Status, parent: @WndBase, x: int, y: int, width: int, height: int, anchorX: @Anchor, anchorY: @Anchor): @Status
end func

+func [d0001.knd, _makeToolbar, _make_instance] makeToolbar(me2: @Toolbar, parent: @WndBase, x: int, y: int, width: int, height: int, anchorX: @Anchor, anchorY: @Anchor): @Toolbar
end func

+func [d0001.knd, _makeTrackbar, _make_instance] makeTrackbar(me2: @Trackbar, parent: @WndBase, x: int, y: int, width: int, height: int, anchorX: @Anchor, anchorY: @Anchor): @Trackbar
end func

+func [d0001.knd, _makeLabelLink, _make_instance] makeLabelLink(me2: @LabelLink, parent: @WndBase, x: int, y: int, width: int, height: int, anchorX: @Anchor, anchorY: @Anchor): @LabelLink
end func

+func [d0001.knd, _makeListView, _make_instance] makeListView(me2: @ListView, parent: @WndBase, x: int, y: int, width: int, height: int, anchorX: @Anchor, anchorY: @Anchor): @ListView
end func

+func [d0001.knd, _makePager, _make_instance] makePager(me2: @Pager, parent: @WndBase, x: int, y: int, width: int, height: int, anchorX: @Anchor, anchorY: @Anchor): @Pager
end func

+func [d0001.knd, _makeTab, _make_instance] makeTab(me2: @Tab, parent: @WndBase, x: int, y: int, width: int, height: int, anchorX: @Anchor, anchorY: @Anchor): @Tab
end func

+func [d0001.knd, _makeTree, _make_instance] makeTree(me2: @Tree, parent: @WndBase, x: int, y: int, width: int, height: int, anchorX: @Anchor, anchorY: @Anchor): @Tree
end func

+func [d0001.knd, _makeSplitX, _make_instance] makeSplitX(me2: @SplitX, parent: @WndBase, x: int, y: int, width: int, height: int, anchorX: @Anchor, anchorY: @Anchor): @SplitX
end func

+func [d0001.knd, _makeSplitY, _make_instance] makeSplitY(me2: @SplitY, parent: @WndBase, x: int, y: int, width: int, height: int, anchorX: @Anchor, anchorY: @Anchor): @SplitY
end func

+func [d0001.knd, _makeScrollX, _make_instance] makeScrollX(me2: @ScrollX, parent: @WndBase, x: int, y: int, width: int, height: int, anchorX: @Anchor, anchorY: @Anchor): @ScrollX
end func

+func [d0001.knd, _makeScrollY, _make_instance] makeScrollY(me2: @ScrollY, parent: @WndBase, x: int, y: int, width: int, height: int, anchorX: @Anchor, anchorY: @Anchor): @ScrollY
end func

+class MenuBase(kuin@ResClass)
	*func [d0001.knd, _menuDtor, _force] _dtor()
	end func

	+func [d0001.knd, _menuAdd] add(id: int, text: []char)
	end func

	+func [d0001.knd, _menuAddLine] addLine()
	end func

	+func [d0001.knd, _menuAddPopup] addPopup(text: []char, popup: @Popup)
	end func

	var handle: int
end class

+class Menu(@MenuBase)
	*func [d0001.knd, _menuDtor, _force] _dtor()
	end func
end class

+class Popup(@MenuBase)
	*func [d0001.knd, _menuDtor, _force] _dtor()
	end func
end class

+func [d0001.knd, _makeMenu, _make_instance] makeMenu(me2: @Menu): @Menu
end func

+func [d0001.knd, _makePopup, _make_instance] makePopup(me2: @Popup): @Popup
end func
