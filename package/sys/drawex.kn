+class Obj()
	+func draw()
	end func

	+func init(x: float, y: float, width: float, height: float, visible: bool)
		do me.x :: x
		do me.y :: y
		do me.width :: width
		do me.height :: height
		do me.visible :: visible
	end func

	+var x: float
	+var y: float
	+var width: float
	+var height: float
	+var visible: bool
end class

+class ObjRect(@Obj)
	+*func draw()
		if(!me.visible)
			ret
		end if
		if(me.colorFill <> 0)
			do draw2d@rect(me.x, me.y, me.width, me.height, me.colorFill)
		end if
		if(me.colorStroke <> 0)
			do draw2d@rectLine(me.x, me.y, me.width, me.height, me.strokeWidth, me.colorStroke)
		end if
	end func

	+var colorFill: int
	+var colorStroke: int
	+var strokeWidth: float
end class

+class ObjCircle(@Obj)
	+*func draw()
		if(!me.visible)
			ret
		end if
		var halfWidth: float :: me.width / 2.0
		var halfHeight: float :: me.height / 2.0
		if(me.colorFill <> 0)
			do draw2d@circle(me.x + halfWidth, me.y + halfHeight, halfWidth, halfHeight, me.colorFill)
		end if
		if(me.colorStroke <> 0)
			do draw2d@circleLine(me.x + halfWidth, me.y + halfHeight, halfWidth, halfHeight, me.strokeWidth, me.colorStroke)
		end if
	end func

	+var colorFill: int
	+var colorStroke: int
	+var strokeWidth: float
end class

+func draw(objs: list<@Obj>)
	do objs.head()
	while(!objs.term())
		do objs.get().draw()
		do objs.next()
	end while
end func
