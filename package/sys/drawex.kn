+class Obj()
	+func draw()
	end func

	+func init(x: float, y: float, width: float, height: float, visible: bool)
		do me.x :: x
		do me.y :: y
		do me.width :: width
		do me.height :: height
		do me.visible :: visible
	end func

	+var x: float
	+var y: float
	+var width: float
	+var height: float
	+var visible: bool
end class

+class ObjRect(@Obj)
	+*func draw()
		if(!me.visible)
			ret
		end if
		if(me.colorFill <> 0)
			do draw2d@rect(me.x, me.y, me.width, me.height, me.colorFill)
		end if
		if(me.colorStroke <> 0)
			do draw2d@rectLine(me.x, me.y, me.width, me.height, me.strokeWidth, me.colorStroke)
		end if
	end func

	+var colorFill: int
	+var colorStroke: int
	+var strokeWidth: float
end class

+class ObjCircle(@Obj)
	+*func draw()
		if(!me.visible)
			ret
		end if
		var halfWidth: float :: me.width / 2.0
		var halfHeight: float :: me.height / 2.0
		if(me.colorFill <> 0)
			do draw2d@circle(me.x + halfWidth, me.y + halfHeight, halfWidth, halfHeight, me.colorFill)
		end if
		if(me.colorStroke <> 0)
			do draw2d@circleLine(me.x + halfWidth, me.y + halfHeight, halfWidth, halfHeight, me.strokeWidth, me.colorStroke)
		end if
	end func

	+var colorFill: int
	+var colorStroke: int
	+var strokeWidth: float
end class

+class ObjText(@Obj)
	+*func draw()
		if(!me.visible)
			ret
		end if
		if(me.color <> 0)
			do me.font.align(me.alignHorizontal, me.alignVertical)
			var x: float
			var y: float
			switch(me.alignHorizontal)
			case %left
				do x :: me.x
			case %center
				do x :: me.x + me.width / 2.0
			case %right
				do x :: me.x + me.width
			default
				assert false
			end switch
			switch(me.alignVertical)
			case %top
				do y :: me.x
			case %center
				do y :: me.x + me.width / 2.0
			case %bottom
				do y :: me.x + me.width
			default
				assert false
			end switch
			do me.font.draw(x, y, me.text, me.color)
		end if
	end func

	+var font: draw@Font
	+var text: []char
	+var color: int
	+var alignHorizontal: draw@AlignHorizontal
	+var alignVertical: draw@AlignVertical
end class

+class ResCacheDraw(rescache@ResCache)
	+func makeFont(fontName: []char, size: int, bold: bool, italic: bool, proportional: bool, advance: float): draw@Font
		var instance: rescache@Instance :: me.add("font,\{fontName},\{size},\{bold},\{italic},\{proportional},\{advance}")
		if(instance.instance =& null)
			do instance.instance :: draw@makeFont(fontName, size, bold, italic, proportional, advance)
		end if
		ret instance.instance $ draw@Font
	end func
end class

+func draw(objs: list<@Obj>)
	do objs.head()
	while(!objs.term())
		do objs.get().draw()
		do objs.next()
	end while
end func
